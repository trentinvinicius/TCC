Help on module ode:

NAME
    ode - Python Open Dynamics Engine (ODE) wrapper.

FILE
    /usr/local/lib/python2.7/dist-packages/ode.so

DESCRIPTION
    This module contains classes and functions that wrap the functionality
    of the Open Dynamics Engine (ODE) which can be found at 
    http://opende.sourceforge.net.
    
    There are the following classes and functions:
    
     - World
     - Body
     - JointGroup
     - Contact
     - Space
     - Mass
    
    Joint classes:
    
     - BallJoint
     - HingeJoint
     - Hinge2Joint
     - SliderJoint
     - UniversalJoint
     - FixedJoint
     - ContactJoint
     - AMotor
     - LMotor
     - Plane2DJoint
    
    Geom classes:
    
     - GeomSphere
     - GeomBox
     - GeomPlane
     - GeomCapsule
     - GeomCylinder
     - GeomRay
     - GeomTransform
     - GeomTriMesh / TriMeshData
    
    Functions:
    
     - CloseODE()
     - collide()

CLASSES
    __builtin__.object
        Body
        Contact
        GeomObject
            GeomBox
            GeomCapsule
            GeomCylinder
            GeomHeightfield
            GeomPlane
            GeomRay
            GeomSphere
            GeomTransform
            GeomTriMesh
            SpaceBase
                HashSpace
                QuadTreeSpace
                SimpleSpace
        HeightfieldData
        Joint
            AMotor
            BallJoint
            ContactJoint
            FixedJoint
            Hinge2Joint
            HingeJoint
            LMotor
            PRJoint
            PUJoint
            PistonJoint
            Plane2DJoint
            SliderJoint
            UniversalJoint
        JointGroup
        JointParam
        JointParams
        Mass
        TriMeshData
        World
    
    class AMotor(Joint)
     |  AMotor joint.
     |  
     |  Constructor::
     |  
     |    AMotor(world, jointgroup=None)
     |  
     |  Method resolution order:
     |      AMotor
     |      Joint
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addTorques(...)
     |      addTorques(torque0, torque1, torque2)
     |      
     |      Applies torques about the AMotor's axes.
     |      
     |      @param torque0: Torque 0 magnitude
     |      @param torque1: Torque 1 magnitude
     |      @param torque2: Torque 2 magnitude
     |      @type torque0: float
     |      @type torque1: float
     |      @type torque2: float
     |  
     |  getAngle(...)
     |      getAngle(anum) -> float
     |      
     |      Return the current angle for axis anum.
     |      
     |      @param anum: Axis index
     |      @type anum: int
     |  
     |  getAngleRate(...)
     |      getAngleRate(anum) -> float
     |      
     |      Return the current angle rate for axis anum.
     |      
     |      @param anum: Axis index
     |      @type anum: int
     |  
     |  getAxis(...)
     |      getAxis(anum)
     |      
     |      Get an AMotor axis.
     |      
     |      @param anum: Axis index (0-2)
     |      @type anum: int
     |  
     |  getAxisRel(...)
     |      getAxisRel(anum) -> int
     |      
     |      Get the relative mode of an axis.
     |      
     |      @param anum: Axis index (0-2)
     |      @type anum: int
     |  
     |  getMode(...)
     |      getMode()
     |      
     |      Return the angular motor mode (AMotorUser or AMotorEuler).
     |  
     |  getNumAxes(...)
     |      getNumAxes() -> int
     |      
     |      Get the number of angular axes that are controlled by the AMotor.
     |  
     |  setAngle(...)
     |      setAngle(anum, angle)
     |      
     |      Tell the AMotor what the current angle is along axis anum.
     |      
     |      @param anum: Axis index
     |      @param angle: Angle
     |      @type anum: int
     |      @type angle: float
     |  
     |  setAxis(...)
     |      setAxis(anum, rel, axis)
     |      
     |      Set an AMotor axis.
     |      
     |      The anum argument selects the axis to change (0,1 or 2).
     |      Each axis can have one of three "relative orientation" modes,
     |      selected by rel:
     |      
     |      0: The axis is anchored to the global frame.
     |      1: The axis is anchored to the first body.
     |      2: The axis is anchored to the second body.
     |      
     |      The axis vector is always specified in global coordinates
     |      regardless of the setting of rel.
     |      
     |      @param anum: Axis number
     |      @param rel: Relative orientation mode
     |      @param axis: Axis
     |      @type anum: int
     |      @type rel: int
     |      @type axis: 3-sequence of floats
     |  
     |  setMode(...)
     |      setMode(mode)
     |      
     |      Set the angular motor mode.  mode must be either AMotorUser or
     |      AMotorEuler.
     |      
     |      @param mode: Angular motor mode
     |      @type mode: int
     |  
     |  setNumAxes(...)
     |      setNumAxes(num)
     |      
     |      Set the number of angular axes that will be controlled by the AMotor.
     |      num may be in the range from 0 to 3.
     |      
     |      @param num: Number of axes (0-3)
     |      @type num: int
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Joint:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  attach(...)
     |      attach(body1, body2)
     |      
     |      Attach the joint to some new bodies. A body can be attached
     |      to the environment by passing None as second body.
     |      
     |      @param body1: First body
     |      @param body2: Second body
     |      @type body1: Body
     |      @type body2: Body
     |  
     |  disable(...)
     |  
     |  enable(...)
     |  
     |  getBody(...)
     |      getBody(index) -> Body
     |      
     |      Return the bodies that this joint connects. If index is 0 the
     |      "first" body will be returned, corresponding to the body1
     |      argument of the attach() method. If index is 1 the "second" body
     |      will be returned, corresponding to the body2 argument of the
     |      attach() method.
     |      
     |      @param index: Bodx index (0 or 1).
     |      @type index: int
     |  
     |  getFeedback(...)
     |      getFeedback() -> (force1, torque1, force2, torque2)
     |      
     |      Get the forces/torques applied by the joint. If feedback is
     |      activated (i.e. setFeedback(True) was called) then this method
     |      returns a tuple (force1, torque1, force2, torque2) with the
     |      forces and torques applied to body 1 and body 2.  The
     |      forces/torques are given as 3-tuples.
     |      
     |      If feedback is deactivated then the method always returns None.
     |  
     |  getParam(...)
     |      getParam(param) -> float
     |      
     |      Get limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to read
     |      @type param: int
     |  
     |  isEnabled(...)
     |  
     |  setFeedback(...)
     |      setFeedback(flag=True)
     |      
     |      Create a feedback buffer. If flag is True then a buffer is
     |      allocated and the forces/torques applied by the joint can
     |      be read using the getFeedback() method. If flag is False the
     |      buffer is released.
     |      
     |      @param flag: Specifies whether a buffer should be created or released
     |      @type flag: bool
     |  
     |  setParam(...)
     |      setParam(param, value)
     |      
     |      Set limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to set
     |      @param value: Parameter value
     |      @type param: int
     |      @type value: float
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Joint:
     |  
     |  param
    
    class BallJoint(Joint)
     |  Ball joint.
     |  
     |  Constructor::
     |  
     |    BallJoint(world, jointgroup=None)
     |  
     |  Method resolution order:
     |      BallJoint
     |      Joint
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  getAnchor(...)
     |      getAnchor() -> 3-tuple of floats
     |      
     |      Get the joint anchor point, in world coordinates.  This
     |      returns the point on body 1.  If the joint is perfectly
     |      satisfied, this will be the same as the point on body 2.
     |  
     |  getAnchor2(...)
     |      getAnchor2() -> 3-tuple of floats
     |      
     |      Get the joint anchor point, in world coordinates.  This
     |      returns the point on body 2. If the joint is perfectly
     |      satisfied, this will be the same as the point on body 1.
     |  
     |  setAnchor(...)
     |      setAnchor(pos)
     |      
     |      Set the joint anchor point which must be specified in world
     |      coordinates.
     |      
     |      @param pos: Anchor position
     |      @type pos: 3-sequence of floats
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Joint:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  attach(...)
     |      attach(body1, body2)
     |      
     |      Attach the joint to some new bodies. A body can be attached
     |      to the environment by passing None as second body.
     |      
     |      @param body1: First body
     |      @param body2: Second body
     |      @type body1: Body
     |      @type body2: Body
     |  
     |  disable(...)
     |  
     |  enable(...)
     |  
     |  getBody(...)
     |      getBody(index) -> Body
     |      
     |      Return the bodies that this joint connects. If index is 0 the
     |      "first" body will be returned, corresponding to the body1
     |      argument of the attach() method. If index is 1 the "second" body
     |      will be returned, corresponding to the body2 argument of the
     |      attach() method.
     |      
     |      @param index: Bodx index (0 or 1).
     |      @type index: int
     |  
     |  getFeedback(...)
     |      getFeedback() -> (force1, torque1, force2, torque2)
     |      
     |      Get the forces/torques applied by the joint. If feedback is
     |      activated (i.e. setFeedback(True) was called) then this method
     |      returns a tuple (force1, torque1, force2, torque2) with the
     |      forces and torques applied to body 1 and body 2.  The
     |      forces/torques are given as 3-tuples.
     |      
     |      If feedback is deactivated then the method always returns None.
     |  
     |  getParam(...)
     |      getParam(param) -> float
     |      
     |      Get limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to read
     |      @type param: int
     |  
     |  isEnabled(...)
     |  
     |  setFeedback(...)
     |      setFeedback(flag=True)
     |      
     |      Create a feedback buffer. If flag is True then a buffer is
     |      allocated and the forces/torques applied by the joint can
     |      be read using the getFeedback() method. If flag is False the
     |      buffer is released.
     |      
     |      @param flag: Specifies whether a buffer should be created or released
     |      @type flag: bool
     |  
     |  setParam(...)
     |      setParam(param, value)
     |      
     |      Set limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to set
     |      @param value: Parameter value
     |      @type param: int
     |      @type value: float
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Joint:
     |  
     |  param
    
    class Body(__builtin__.object)
     |  The rigid body class encapsulating the ODE body.
     |  
     |  This class represents a rigid body that has a location and orientation
     |  in space and that stores the mass properties of an object.
     |  
     |  When creating a Body object you have to pass the world it belongs to
     |  as argument to the constructor::
     |  
     |    >>> import ode
     |    >>> w = ode.World()
     |    >>> b = ode.Body(w)
     |  
     |  Methods defined here:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  addForce(...)
     |      addForce(f)
     |      
     |      Add an external force f given in absolute coordinates. The force
     |      is applied at the center of mass.
     |      
     |      @param f: Force
     |      @type f: 3-sequence of floats
     |  
     |  addForceAtPos(...)
     |      addForceAtPos(f, p)
     |      
     |      Add an external force f at position p. Both arguments must be
     |      given in absolute coordinates.
     |      
     |      @param f: Force
     |      @param p: Position
     |      @type f: 3-sequence of floats
     |      @type p: 3-sequence of floats
     |  
     |  addForceAtRelPos(...)
     |      addForceAtRelPos(f, p)
     |      
     |      Add an external force f at position p. f is given in absolute
     |      coordinates and p in absolute coordinates.
     |      
     |      @param f: Force
     |      @param p: Position
     |      @type f: 3-sequence of floats
     |      @type p: 3-sequence of floats
     |  
     |  addRelForce(...)
     |      addRelForce(f)
     |      
     |      Add an external force f given in relative coordinates
     |      (relative to the body's own frame of reference). The force
     |      is applied at the center of mass.
     |      
     |      @param f: Force
     |      @type f: 3-sequence of floats
     |  
     |  addRelForceAtPos(...)
     |      addRelForceAtPos(f, p)
     |      
     |      Add an external force f at position p. f is given in relative
     |      coordinates and p in relative coordinates.
     |      
     |      @param f: Force
     |      @param p: Position
     |      @type f: 3-sequence of floats
     |      @type p: 3-sequence of floats
     |  
     |  addRelForceAtRelPos(...)
     |      addRelForceAtRelPos(f, p)
     |      
     |      Add an external force f at position p. Both arguments must be
     |      given in relative coordinates.
     |      
     |      @param f: Force
     |      @param p: Position
     |      @type f: 3-sequence of floats
     |      @type p: 3-sequence of floats
     |  
     |  addRelTorque(...)
     |      addRelTorque(t)
     |      
     |      Add an external torque t given in relative coordinates
     |      (relative to the body's own frame of reference).
     |      
     |      @param t: Torque
     |      @type t: 3-sequence of floats
     |  
     |  addTorque(...)
     |      addTorque(t)
     |      
     |      Add an external torque t given in absolute coordinates.
     |      
     |      @param t: Torque
     |      @type t: 3-sequence of floats
     |  
     |  disable(...)
     |      disable()
     |      
     |      Manually disable a body. Note that a disabled body that is connected
     |      through a joint to an enabled body will be automatically re-enabled
     |      at the next simulation step.
     |  
     |  enable(...)
     |      enable()
     |      
     |      Manually enable a body.
     |  
     |  getAngularVel(...)
     |      getAngularVel() -> 3-tuple
     |      
     |      Get the current angular velocity of the body.
     |  
     |  getFiniteRotationAxis(...)
     |      getFiniteRotationAxis() -> 3-tuple
     |      
     |      Return the current finite rotation axis of the body.
     |  
     |  getFiniteRotationMode(...)
     |      getFiniteRotationMode() -> mode (0/1)
     |      
     |      Return the current finite rotation mode of a body (0 or 1).
     |      See setFiniteRotationMode().
     |  
     |  getForce(...)
     |      getForce() -> 3-tuple
     |      
     |      Return the current accumulated force.
     |  
     |  getGravityMode(...)
     |      getGravityMode() -> bool
     |      
     |      Return True if the body is influenced by the world's gravity.
     |  
     |  getLinearVel(...)
     |      getLinearVel() -> 3-tuple
     |      
     |      Get the current linear velocity of the body.
     |  
     |  getMass(...)
     |      getMass() -> mass
     |      
     |      Return the mass properties as a Mass object.
     |  
     |  getNumJoints(...)
     |      getNumJoints() -> int
     |      
     |      Return the number of joints that are attached to this body.
     |  
     |  getPointVel(...)
     |      getPointVel(p) -> 3-tuple
     |      
     |      Utility function that takes a point p on a body and returns
     |      that point's velocity in global coordinates. The point p
     |      must be given in global coordinates.
     |      
     |      @param p: Body point (global coordinates)
     |      @type p: 3-sequence of floats
     |  
     |  getPosRelPoint(...)
     |      getPosRelPoint(p) -> 3-tuple
     |      
     |      This is the inverse of getRelPointPos(). It takes a point p in
     |      global coordinates and returns the point's position in
     |      body-relative coordinates.
     |      
     |      @param p: Body point (global coordinates)
     |      @type p: 3-sequence of floats
     |  
     |  getPosition(...)
     |      getPosition() -> 3-tuple
     |      
     |      Return the current position of the body.
     |  
     |  getQuaternion(...)
     |      getQuaternion() -> 4-tuple
     |      
     |      Return the current rotation as a quaternion. The return value
     |      is a list of 4 floats.
     |  
     |  getRelPointPos(...)
     |      getRelPointPos(p) -> 3-tuple
     |      
     |      Utility function that takes a point p on a body and returns
     |      that point's position in global coordinates. The point p
     |      must be given in body relative coordinates.
     |      
     |      @param p: Body point (local coordinates)
     |      @type p: 3-sequence of floats
     |  
     |  getRelPointVel(...)
     |      getRelPointVel(p) -> 3-tuple
     |      
     |      Utility function that takes a point p on a body and returns
     |      that point's velocity in global coordinates. The point p
     |      must be given in body relative coordinates.
     |      
     |      @param p: Body point (local coordinates)
     |      @type p: 3-sequence of floats
     |  
     |  getRotation(...)
     |      getRotation() -> 9-tuple
     |      
     |      Return the current rotation matrix as a tuple of 9 floats (row-major
     |      order).
     |  
     |  getTorque(...)
     |      getTorque() -> 3-tuple
     |      
     |      Return the current accumulated torque.
     |  
     |  isEnabled(...)
     |      isEnabled() -> bool
     |      
     |      Check if a body is currently enabled.
     |  
     |  isKinematic(...)
     |      isKinematic() -> bool
     |      
     |      Return True if the body is kinematic (not influenced by other forces).
     |      
     |      Kinematic bodies behave as if they had infinite mass. This means they don't react
     |      to any force (gravity, constraints or user-supplied); they simply follow
     |      velocity to reach the next position. [from ODE wiki]
     |  
     |  setAngularVel(...)
     |      setAngularVel(vel)
     |      
     |      Set the angular velocity of the body.
     |      
     |      @param vel: New angular velocity
     |      @type vel: 3-sequence of floats
     |  
     |  setDynamic(...)
     |      setDynamic()
     |      
     |      Set a body to the (default) "dynamic" state, instead of "kinematic".
     |      See setKinematic() for more information.
     |  
     |  setFiniteRotationAxis(...)
     |      setFiniteRotationAxis(a)
     |      
     |      Set the finite rotation axis of the body.  This axis only has a
     |      meaning when the finite rotation mode is set
     |      (see setFiniteRotationMode()).
     |      
     |      @param a: Axis
     |      @type a: 3-sequence of floats
     |  
     |  setFiniteRotationMode(...)
     |      setFiniteRotationMode(mode)
     |      
     |      This function controls the way a body's orientation is updated at
     |      each time step. The mode argument can be:
     |      
     |       - 0: An "infinitesimal" orientation update is used. This is
     |         fast to compute, but it can occasionally cause inaccuracies
     |         for bodies that are rotating at high speed, especially when
     |         those bodies are joined to other bodies. This is the default
     |         for every new body that is created.
     |      
     |       - 1: A "finite" orientation update is used. This is more
     |         costly to compute, but will be more accurate for high speed
     |         rotations. Note however that high speed rotations can result
     |         in many types of error in a simulation, and this mode will
     |         only fix one of those sources of error.
     |      
     |      @param mode: Rotation mode (0/1)
     |      @type mode: int
     |  
     |  setForce(...)
     |      setForce(f)
     |      
     |      Set the body force accumulation vector.
     |      
     |      @param f: Force
     |      @type f: 3-tuple of floats
     |  
     |  setGravityMode(...)
     |      setGravityMode(mode)
     |      
     |      Set whether the body is influenced by the world's gravity
     |      or not. If mode is True it is, otherwise it isn't.
     |      Newly created bodies are always influenced by the world's gravity.
     |      
     |      @param mode: Gravity mode
     |      @type mode: bool
     |  
     |  setKinematic(...)
     |      setKinematic()
     |      
     |      Set the kinematic state of the body (change it into a kinematic body)
     |      
     |      Kinematic bodies behave as if they had infinite mass. This means they don't react
     |      to any force (gravity, constraints or user-supplied); they simply follow 
     |      velocity to reach the next position. [from ODE wiki]
     |  
     |  setLinearVel(...)
     |      setLinearVel(vel)
     |      
     |      Set the linear velocity of the body.
     |      
     |      @param vel: New velocity
     |      @type vel: 3-sequence of floats
     |  
     |  setMass(...)
     |      setMass(mass)
     |      
     |      Set the mass properties of the body. The argument mass must be
     |      an instance of a Mass object.
     |      
     |      @param mass: Mass properties
     |      @type mass: Mass
     |  
     |  setPosition(...)
     |      setPosition(pos)
     |      
     |      Set the position of the body.
     |      
     |      @param pos: The new position
     |      @type pos: 3-sequence of floats
     |  
     |  setQuaternion(...)
     |      setQuaternion(q)
     |      
     |      Set the orientation of the body. The quaternion must be given as a
     |      sequence of 4 floats.
     |      
     |      @param q: Quaternion
     |      @type q: 4-sequence of floats
     |  
     |  setRotation(...)
     |      setRotation(R)
     |      
     |      Set the orientation of the body. The rotation matrix must be
     |      given as a sequence of 9 floats which are the elements of the
     |      matrix in row-major order.
     |      
     |      @param R: Rotation matrix
     |      @type R: 9-sequence of floats
     |  
     |  setTorque(...)
     |      setTorque(t)
     |      
     |      Set the body torque accumulation vector.
     |      
     |      @param t: Torque
     |      @type t: 3-tuple of floats
     |  
     |  vectorFromWorld(...)
     |      vectorFromWorld(v) -> 3-tuple
     |      
     |      Given a vector v expressed in the world coordinate system, rotate
     |      it to the body coordinate system.
     |      
     |      @param v: Vector in world coordinate system
     |      @type v: 3-sequence of floats
     |  
     |  vectorToWorld(...)
     |      vectorToWorld(v) -> 3-tuple
     |      
     |      Given a vector v expressed in the body coordinate system, rotate
     |      it to the world coordinate system.
     |      
     |      @param v: Vector in body coordinate system
     |      @type v: 3-sequence of floats
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Contact(__builtin__.object)
     |  This class represents a contact between two bodies in one point.
     |  
     |  A Contact object stores all the input parameters for a ContactJoint.
     |  This class wraps the ODE dContact structure which has 3 components::
     |  
     |   struct dContact {
     |     dSurfaceParameters surface;
     |     dContactGeom geom;
     |     dVector3 fdir1;
     |   };    
     |  
     |  This wrapper class provides methods to get and set the items of those
     |  structures.
     |  
     |  Methods defined here:
     |  
     |  getBounce(...)
     |      getBounce() -> float
     |      
     |      Return the restitution parameter.
     |  
     |  getBounceVel(...)
     |      getBounceVel() -> float
     |      
     |      Return the minimum incoming velocity necessary for bounce.
     |  
     |  getContactGeomParams(...)
     |      getContactGeomParams() -> (pos, normal, depth, geom1, geom2)
     |      
     |      Get the ContactGeom structure of the contact.
     |      
     |      The return value is a tuple (pos, normal, depth, geom1, geom2)
     |      where pos and normal are 3-tuples of floats and depth is a single
     |      float. geom1 and geom2 are the Geom objects of the geoms in contact.
     |  
     |  getFDir1(...)
     |      getFDir1() -> (x, y, z)
     |      
     |      Get the "first friction direction" vector that defines a direction
     |      along which frictional force is applied.
     |  
     |  getMode(...)
     |      getMode() -> flags
     |      
     |      Return the contact flags.
     |  
     |  getMotion1(...)
     |      getMotion1() -> float
     |      
     |      Get the surface velocity in friction direction 1.
     |  
     |  getMotion2(...)
     |      getMotion2() -> float
     |      
     |      Get the surface velocity in friction direction 2.
     |  
     |  getMu(...)
     |      getMu() -> float
     |      
     |      Return the Coulomb friction coefficient.
     |  
     |  getMu2(...)
     |      getMu2() -> float
     |      
     |      Return the optional Coulomb friction coefficient for direction 2.
     |  
     |  getSlip1(...)
     |      getSlip1() -> float
     |      
     |      Get the coefficient of force-dependent-slip (FDS) for friction
     |      direction 1.
     |  
     |  getSlip2(...)
     |      getSlip2() -> float
     |      
     |      Get the coefficient of force-dependent-slip (FDS) for friction
     |      direction 2.
     |  
     |  getSoftCFM(...)
     |      getSoftCFM() -> float
     |      
     |      Return the contact normal "softness" parameter.
     |  
     |  getSoftERP(...)
     |      getSoftERP() -> float
     |      
     |      Return the contact normal "softness" parameter.
     |  
     |  setBounce(...)
     |      setBounce(b)
     |      
     |      @param b: Restitution parameter (0..1)
     |      @type b: float
     |  
     |  setBounceVel(...)
     |      setBounceVel(bv)
     |      
     |      Set the minimum incoming velocity necessary for bounce. Incoming
     |      velocities below this will effectively have a bounce parameter of 0.
     |      
     |      @param bv: Velocity
     |      @type bv: float
     |  
     |  setContactGeomParams(...)
     |      setContactGeomParams(pos, normal, depth, geom1=None, geom2=None)
     |      
     |      Set the ContactGeom structure of the contact.
     |      
     |      @param pos:  Contact position, in global coordinates
     |      @type pos: 3-sequence of floats
     |      @param normal: Unit length normal vector
     |      @type normal: 3-sequence of floats
     |      @param depth: Depth to which the two bodies inter-penetrate
     |      @type depth: float
     |      @param geom1: Geometry object 1 that collided
     |      @type geom1: Geom
     |      @param geom2: Geometry object 2 that collided
     |      @type geom2: Geom
     |  
     |  setFDir1(...)
     |      setFDir1(fdir)
     |      
     |      Set the "first friction direction" vector that defines a direction
     |      along which frictional force is applied. It must be of unit length
     |      and perpendicular to the contact normal (so it is typically
     |      tangential to the contact surface).
     |      
     |      @param fdir: Friction direction
     |      @type fdir: 3-sequence of floats
     |  
     |  setMode(...)
     |      setMode(flags)
     |      
     |      Set the contact flags. The argument m is a combination of the
     |      ContactXyz flags (ContactMu2, ContactBounce, ...).
     |      
     |      @param flags: Contact flags
     |      @type flags: int
     |  
     |  setMotion1(...)
     |      setMotion1(m)
     |      
     |      Set the surface velocity in friction direction 1.
     |      
     |      @param m: Surface velocity
     |      @type m: float
     |  
     |  setMotion2(...)
     |      setMotion2(m)
     |      
     |      Set the surface velocity in friction direction 2.
     |      
     |      @param m: Surface velocity
     |      @type m: float
     |  
     |  setMu(...)
     |      setMu(mu)
     |      
     |      Set the Coulomb friction coefficient.
     |      
     |      @param mu: Coulomb friction coefficient (0..Infinity)
     |      @type mu: float
     |  
     |  setMu2(...)
     |      setMu2(mu)
     |      
     |      Set the optional Coulomb friction coefficient for direction 2.
     |      
     |      @param mu: Coulomb friction coefficient (0..Infinity)
     |      @type mu: float
     |  
     |  setSlip1(...)
     |      setSlip1(s)
     |      
     |      Set the coefficient of force-dependent-slip (FDS) for friction
     |      direction 1.
     |      
     |      @param s: FDS coefficient
     |      @type s: float
     |  
     |  setSlip2(...)
     |      setSlip2(s)
     |      
     |      Set the coefficient of force-dependent-slip (FDS) for friction
     |      direction 1.
     |      
     |      @param s: FDS coefficient
     |      @type s: float
     |  
     |  setSoftCFM(...)
     |      setSoftCFM(cfm)
     |      
     |      Set the contact normal "softness" parameter.
     |      
     |      @param cfm: Softness parameter
     |      @type cfm: float
     |  
     |  setSoftERP(...)
     |      setSoftERP(erp)
     |      
     |      Set the contact normal "softness" parameter.
     |      
     |      @param erp: Softness parameter
     |      @type erp: float
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class ContactJoint(Joint)
     |  Contact joint.
     |  
     |  Constructor::
     |  
     |    ContactJoint(world, jointgroup, contact)
     |  
     |  Method resolution order:
     |      ContactJoint
     |      Joint
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Joint:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  attach(...)
     |      attach(body1, body2)
     |      
     |      Attach the joint to some new bodies. A body can be attached
     |      to the environment by passing None as second body.
     |      
     |      @param body1: First body
     |      @param body2: Second body
     |      @type body1: Body
     |      @type body2: Body
     |  
     |  disable(...)
     |  
     |  enable(...)
     |  
     |  getBody(...)
     |      getBody(index) -> Body
     |      
     |      Return the bodies that this joint connects. If index is 0 the
     |      "first" body will be returned, corresponding to the body1
     |      argument of the attach() method. If index is 1 the "second" body
     |      will be returned, corresponding to the body2 argument of the
     |      attach() method.
     |      
     |      @param index: Bodx index (0 or 1).
     |      @type index: int
     |  
     |  getFeedback(...)
     |      getFeedback() -> (force1, torque1, force2, torque2)
     |      
     |      Get the forces/torques applied by the joint. If feedback is
     |      activated (i.e. setFeedback(True) was called) then this method
     |      returns a tuple (force1, torque1, force2, torque2) with the
     |      forces and torques applied to body 1 and body 2.  The
     |      forces/torques are given as 3-tuples.
     |      
     |      If feedback is deactivated then the method always returns None.
     |  
     |  getParam(...)
     |      getParam(param) -> float
     |      
     |      Get limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to read
     |      @type param: int
     |  
     |  isEnabled(...)
     |  
     |  setFeedback(...)
     |      setFeedback(flag=True)
     |      
     |      Create a feedback buffer. If flag is True then a buffer is
     |      allocated and the forces/torques applied by the joint can
     |      be read using the getFeedback() method. If flag is False the
     |      buffer is released.
     |      
     |      @param flag: Specifies whether a buffer should be created or released
     |      @type flag: bool
     |  
     |  setParam(...)
     |      setParam(param, value)
     |      
     |      Set limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to set
     |      @param value: Parameter value
     |      @type param: int
     |      @type value: float
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Joint:
     |  
     |  param
    
    class FixedJoint(Joint)
     |  Fixed joint.
     |  
     |  Constructor::
     |  
     |    FixedJoint(world, jointgroup=None)
     |  
     |  Method resolution order:
     |      FixedJoint
     |      Joint
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  setFixed(...)
     |      setFixed()
     |      
     |      Call this on the fixed joint after it has been attached to
     |      remember the current desired relative offset and desired
     |      relative rotation between the bodies.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Joint:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  attach(...)
     |      attach(body1, body2)
     |      
     |      Attach the joint to some new bodies. A body can be attached
     |      to the environment by passing None as second body.
     |      
     |      @param body1: First body
     |      @param body2: Second body
     |      @type body1: Body
     |      @type body2: Body
     |  
     |  disable(...)
     |  
     |  enable(...)
     |  
     |  getBody(...)
     |      getBody(index) -> Body
     |      
     |      Return the bodies that this joint connects. If index is 0 the
     |      "first" body will be returned, corresponding to the body1
     |      argument of the attach() method. If index is 1 the "second" body
     |      will be returned, corresponding to the body2 argument of the
     |      attach() method.
     |      
     |      @param index: Bodx index (0 or 1).
     |      @type index: int
     |  
     |  getFeedback(...)
     |      getFeedback() -> (force1, torque1, force2, torque2)
     |      
     |      Get the forces/torques applied by the joint. If feedback is
     |      activated (i.e. setFeedback(True) was called) then this method
     |      returns a tuple (force1, torque1, force2, torque2) with the
     |      forces and torques applied to body 1 and body 2.  The
     |      forces/torques are given as 3-tuples.
     |      
     |      If feedback is deactivated then the method always returns None.
     |  
     |  getParam(...)
     |      getParam(param) -> float
     |      
     |      Get limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to read
     |      @type param: int
     |  
     |  isEnabled(...)
     |  
     |  setFeedback(...)
     |      setFeedback(flag=True)
     |      
     |      Create a feedback buffer. If flag is True then a buffer is
     |      allocated and the forces/torques applied by the joint can
     |      be read using the getFeedback() method. If flag is False the
     |      buffer is released.
     |      
     |      @param flag: Specifies whether a buffer should be created or released
     |      @type flag: bool
     |  
     |  setParam(...)
     |      setParam(param, value)
     |      
     |      Set limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to set
     |      @param value: Parameter value
     |      @type param: int
     |      @type value: float
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Joint:
     |  
     |  param
    
    class GeomBox(GeomObject)
     |  Box geometry.
     |  
     |  This class represents a box centered at the origin.
     |  
     |  Constructor::
     |  
     |    GeomBox(space=None, lengths=(1.0, 1.0, 1.0))
     |  
     |  Method resolution order:
     |      GeomBox
     |      GeomObject
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  getLengths(...)
     |  
     |  placeable(...)
     |  
     |  pointDepth(...)
     |      pointDepth(p) -> float
     |      
     |      Return the depth of the point p in the box. Points inside the
     |      geom will have positive depth, points outside it will have
     |      negative depth, and points on the surface will have zero
     |      depth.
     |      
     |      @param p: Point
     |      @type p: 3-sequence of floats
     |  
     |  setLengths(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from GeomObject:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  disable(...)
     |      disable()
     |      
     |      Disable the geom.
     |  
     |  enable(...)
     |      enable()
     |      
     |      Enable the geom.
     |  
     |  getAABB(...)
     |      getAABB() -> 6-tuple
     |      
     |      Return an axis aligned bounding box that surrounds the geom.
     |      The return value is a 6-tuple (minx, maxx, miny, maxy, minz, maxz).
     |  
     |  getBody(...)
     |      getBody() -> Body
     |      
     |      Get the body associated with this geom.
     |  
     |  getCategoryBits(...)
     |      getCategoryBits() -> long
     |      
     |      Return the "category" bitfields for this geom.
     |  
     |  getCollideBits(...)
     |      getCollideBits() -> long
     |      
     |      Return the "collide" bitfields for this geom.
     |  
     |  getPosition(...)
     |      getPosition() -> 3-tuple
     |      
     |      Get the current position of the geom. If the geom is attached to
     |      a body the returned value is the body's position.
     |  
     |  getQuaternion(...)
     |      getQuaternion() -> (w,x,y,z)
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getRotation(...)
     |      getRotation() -> 9-tuple
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getSpace(...)
     |      getSpace() -> Space
     |      
     |      Return the space that the given geometry is contained in,
     |      or return None if it is not contained in any space.
     |  
     |  isEnabled(...)
     |      isEnabled() -> bool
     |      
     |      Return True if the geom is enabled.
     |  
     |  isSpace(...)
     |      isSpace() -> bool
     |      
     |      Return 1 if the given geom is a space, or 0 if not.
     |  
     |  setBody(...)
     |      setBody(body)
     |      
     |      Set the body associated with a placeable geom.
     |      
     |      @param body: The Body object or None.
     |      @type body: Body
     |  
     |  setCategoryBits(...)
     |      setCategoryBits(bits)
     |      
     |      Set the "category" bitfields for this geom.
     |      
     |      @param bits: Category bit field
     |      @type bits: int/long
     |  
     |  setCollideBits(...)
     |      setCollideBits(bits)
     |      
     |      Set the "collide" bitfields for this geom.
     |      
     |      @param bits: Collide bit field
     |      @type bits: int/long
     |  
     |  setPosition(...)
     |      setPosition(pos)
     |      
     |      Set the position of the geom. If the geom is attached to a body,
     |      the body's position will also be changed.
     |      
     |      @param pos: Position
     |      @type pos: 3-sequence of floats
     |  
     |  setQuaternion(...)
     |      setQuaternion(q)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param q: Quaternion (w,x,y,z)
     |      @type q: 4-sequence of floats
     |  
     |  setRotation(...)
     |      setRotation(R)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param R: Rotation matrix
     |      @type R: 9-sequence of floats
    
    GeomCCylinder = class GeomCapsule(GeomObject)
     |  Capped cylinder geometry.
     |  
     |  This class represents a capped cylinder aligned along the local Z axis
     |  and centered at the origin.
     |  
     |  Constructor::
     |  
     |    GeomCapsule(space=None, radius=0.5, length=1.0)
     |  
     |  The length parameter does not include the caps.
     |  
     |  Method resolution order:
     |      GeomCapsule
     |      GeomObject
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  getParams(...)
     |  
     |  placeable(...)
     |  
     |  pointDepth(...)
     |      pointDepth(p) -> float
     |      
     |      Return the depth of the point p in the cylinder. Points inside the
     |      geom will have positive depth, points outside it will have
     |      negative depth, and points on the surface will have zero
     |      depth.
     |      
     |      @param p: Point
     |      @type p: 3-sequence of floats
     |  
     |  setParams(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from GeomObject:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  disable(...)
     |      disable()
     |      
     |      Disable the geom.
     |  
     |  enable(...)
     |      enable()
     |      
     |      Enable the geom.
     |  
     |  getAABB(...)
     |      getAABB() -> 6-tuple
     |      
     |      Return an axis aligned bounding box that surrounds the geom.
     |      The return value is a 6-tuple (minx, maxx, miny, maxy, minz, maxz).
     |  
     |  getBody(...)
     |      getBody() -> Body
     |      
     |      Get the body associated with this geom.
     |  
     |  getCategoryBits(...)
     |      getCategoryBits() -> long
     |      
     |      Return the "category" bitfields for this geom.
     |  
     |  getCollideBits(...)
     |      getCollideBits() -> long
     |      
     |      Return the "collide" bitfields for this geom.
     |  
     |  getPosition(...)
     |      getPosition() -> 3-tuple
     |      
     |      Get the current position of the geom. If the geom is attached to
     |      a body the returned value is the body's position.
     |  
     |  getQuaternion(...)
     |      getQuaternion() -> (w,x,y,z)
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getRotation(...)
     |      getRotation() -> 9-tuple
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getSpace(...)
     |      getSpace() -> Space
     |      
     |      Return the space that the given geometry is contained in,
     |      or return None if it is not contained in any space.
     |  
     |  isEnabled(...)
     |      isEnabled() -> bool
     |      
     |      Return True if the geom is enabled.
     |  
     |  isSpace(...)
     |      isSpace() -> bool
     |      
     |      Return 1 if the given geom is a space, or 0 if not.
     |  
     |  setBody(...)
     |      setBody(body)
     |      
     |      Set the body associated with a placeable geom.
     |      
     |      @param body: The Body object or None.
     |      @type body: Body
     |  
     |  setCategoryBits(...)
     |      setCategoryBits(bits)
     |      
     |      Set the "category" bitfields for this geom.
     |      
     |      @param bits: Category bit field
     |      @type bits: int/long
     |  
     |  setCollideBits(...)
     |      setCollideBits(bits)
     |      
     |      Set the "collide" bitfields for this geom.
     |      
     |      @param bits: Collide bit field
     |      @type bits: int/long
     |  
     |  setPosition(...)
     |      setPosition(pos)
     |      
     |      Set the position of the geom. If the geom is attached to a body,
     |      the body's position will also be changed.
     |      
     |      @param pos: Position
     |      @type pos: 3-sequence of floats
     |  
     |  setQuaternion(...)
     |      setQuaternion(q)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param q: Quaternion (w,x,y,z)
     |      @type q: 4-sequence of floats
     |  
     |  setRotation(...)
     |      setRotation(R)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param R: Rotation matrix
     |      @type R: 9-sequence of floats
    
    class GeomCapsule(GeomObject)
     |  Capped cylinder geometry.
     |  
     |  This class represents a capped cylinder aligned along the local Z axis
     |  and centered at the origin.
     |  
     |  Constructor::
     |  
     |    GeomCapsule(space=None, radius=0.5, length=1.0)
     |  
     |  The length parameter does not include the caps.
     |  
     |  Method resolution order:
     |      GeomCapsule
     |      GeomObject
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  getParams(...)
     |  
     |  placeable(...)
     |  
     |  pointDepth(...)
     |      pointDepth(p) -> float
     |      
     |      Return the depth of the point p in the cylinder. Points inside the
     |      geom will have positive depth, points outside it will have
     |      negative depth, and points on the surface will have zero
     |      depth.
     |      
     |      @param p: Point
     |      @type p: 3-sequence of floats
     |  
     |  setParams(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from GeomObject:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  disable(...)
     |      disable()
     |      
     |      Disable the geom.
     |  
     |  enable(...)
     |      enable()
     |      
     |      Enable the geom.
     |  
     |  getAABB(...)
     |      getAABB() -> 6-tuple
     |      
     |      Return an axis aligned bounding box that surrounds the geom.
     |      The return value is a 6-tuple (minx, maxx, miny, maxy, minz, maxz).
     |  
     |  getBody(...)
     |      getBody() -> Body
     |      
     |      Get the body associated with this geom.
     |  
     |  getCategoryBits(...)
     |      getCategoryBits() -> long
     |      
     |      Return the "category" bitfields for this geom.
     |  
     |  getCollideBits(...)
     |      getCollideBits() -> long
     |      
     |      Return the "collide" bitfields for this geom.
     |  
     |  getPosition(...)
     |      getPosition() -> 3-tuple
     |      
     |      Get the current position of the geom. If the geom is attached to
     |      a body the returned value is the body's position.
     |  
     |  getQuaternion(...)
     |      getQuaternion() -> (w,x,y,z)
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getRotation(...)
     |      getRotation() -> 9-tuple
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getSpace(...)
     |      getSpace() -> Space
     |      
     |      Return the space that the given geometry is contained in,
     |      or return None if it is not contained in any space.
     |  
     |  isEnabled(...)
     |      isEnabled() -> bool
     |      
     |      Return True if the geom is enabled.
     |  
     |  isSpace(...)
     |      isSpace() -> bool
     |      
     |      Return 1 if the given geom is a space, or 0 if not.
     |  
     |  setBody(...)
     |      setBody(body)
     |      
     |      Set the body associated with a placeable geom.
     |      
     |      @param body: The Body object or None.
     |      @type body: Body
     |  
     |  setCategoryBits(...)
     |      setCategoryBits(bits)
     |      
     |      Set the "category" bitfields for this geom.
     |      
     |      @param bits: Category bit field
     |      @type bits: int/long
     |  
     |  setCollideBits(...)
     |      setCollideBits(bits)
     |      
     |      Set the "collide" bitfields for this geom.
     |      
     |      @param bits: Collide bit field
     |      @type bits: int/long
     |  
     |  setPosition(...)
     |      setPosition(pos)
     |      
     |      Set the position of the geom. If the geom is attached to a body,
     |      the body's position will also be changed.
     |      
     |      @param pos: Position
     |      @type pos: 3-sequence of floats
     |  
     |  setQuaternion(...)
     |      setQuaternion(q)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param q: Quaternion (w,x,y,z)
     |      @type q: 4-sequence of floats
     |  
     |  setRotation(...)
     |      setRotation(R)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param R: Rotation matrix
     |      @type R: 9-sequence of floats
    
    class GeomCylinder(GeomObject)
     |  Plain cylinder geometry.
     |  
     |  This class represents an uncapped cylinder aligned along the local Z axis
     |  and centered at the origin.
     |  
     |  Constructor::
     |  
     |    GeomCylinder(space=None, radius=0.5, length=1.0)
     |  
     |  Method resolution order:
     |      GeomCylinder
     |      GeomObject
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  getParams(...)
     |  
     |  placeable(...)
     |  
     |  setParams(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from GeomObject:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  disable(...)
     |      disable()
     |      
     |      Disable the geom.
     |  
     |  enable(...)
     |      enable()
     |      
     |      Enable the geom.
     |  
     |  getAABB(...)
     |      getAABB() -> 6-tuple
     |      
     |      Return an axis aligned bounding box that surrounds the geom.
     |      The return value is a 6-tuple (minx, maxx, miny, maxy, minz, maxz).
     |  
     |  getBody(...)
     |      getBody() -> Body
     |      
     |      Get the body associated with this geom.
     |  
     |  getCategoryBits(...)
     |      getCategoryBits() -> long
     |      
     |      Return the "category" bitfields for this geom.
     |  
     |  getCollideBits(...)
     |      getCollideBits() -> long
     |      
     |      Return the "collide" bitfields for this geom.
     |  
     |  getPosition(...)
     |      getPosition() -> 3-tuple
     |      
     |      Get the current position of the geom. If the geom is attached to
     |      a body the returned value is the body's position.
     |  
     |  getQuaternion(...)
     |      getQuaternion() -> (w,x,y,z)
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getRotation(...)
     |      getRotation() -> 9-tuple
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getSpace(...)
     |      getSpace() -> Space
     |      
     |      Return the space that the given geometry is contained in,
     |      or return None if it is not contained in any space.
     |  
     |  isEnabled(...)
     |      isEnabled() -> bool
     |      
     |      Return True if the geom is enabled.
     |  
     |  isSpace(...)
     |      isSpace() -> bool
     |      
     |      Return 1 if the given geom is a space, or 0 if not.
     |  
     |  setBody(...)
     |      setBody(body)
     |      
     |      Set the body associated with a placeable geom.
     |      
     |      @param body: The Body object or None.
     |      @type body: Body
     |  
     |  setCategoryBits(...)
     |      setCategoryBits(bits)
     |      
     |      Set the "category" bitfields for this geom.
     |      
     |      @param bits: Category bit field
     |      @type bits: int/long
     |  
     |  setCollideBits(...)
     |      setCollideBits(bits)
     |      
     |      Set the "collide" bitfields for this geom.
     |      
     |      @param bits: Collide bit field
     |      @type bits: int/long
     |  
     |  setPosition(...)
     |      setPosition(pos)
     |      
     |      Set the position of the geom. If the geom is attached to a body,
     |      the body's position will also be changed.
     |      
     |      @param pos: Position
     |      @type pos: 3-sequence of floats
     |  
     |  setQuaternion(...)
     |      setQuaternion(q)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param q: Quaternion (w,x,y,z)
     |      @type q: 4-sequence of floats
     |  
     |  setRotation(...)
     |      setRotation(R)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param R: Rotation matrix
     |      @type R: 9-sequence of floats
    
    class GeomHeightfield(GeomObject)
     |  Heightfield object.
     |  
     |  To construct the heightfield geom, you need a HeightfieldData object that
     |  stores the heightfield data. This object has to be passed as the first
     |  argument to the constructor.
     |  
     |  Constructor::
     |      GeomHeightfield(data, space=None)
     |  
     |  Method resolution order:
     |      GeomHeightfield
     |      GeomObject
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  placeable(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from GeomObject:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  disable(...)
     |      disable()
     |      
     |      Disable the geom.
     |  
     |  enable(...)
     |      enable()
     |      
     |      Enable the geom.
     |  
     |  getAABB(...)
     |      getAABB() -> 6-tuple
     |      
     |      Return an axis aligned bounding box that surrounds the geom.
     |      The return value is a 6-tuple (minx, maxx, miny, maxy, minz, maxz).
     |  
     |  getBody(...)
     |      getBody() -> Body
     |      
     |      Get the body associated with this geom.
     |  
     |  getCategoryBits(...)
     |      getCategoryBits() -> long
     |      
     |      Return the "category" bitfields for this geom.
     |  
     |  getCollideBits(...)
     |      getCollideBits() -> long
     |      
     |      Return the "collide" bitfields for this geom.
     |  
     |  getPosition(...)
     |      getPosition() -> 3-tuple
     |      
     |      Get the current position of the geom. If the geom is attached to
     |      a body the returned value is the body's position.
     |  
     |  getQuaternion(...)
     |      getQuaternion() -> (w,x,y,z)
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getRotation(...)
     |      getRotation() -> 9-tuple
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getSpace(...)
     |      getSpace() -> Space
     |      
     |      Return the space that the given geometry is contained in,
     |      or return None if it is not contained in any space.
     |  
     |  isEnabled(...)
     |      isEnabled() -> bool
     |      
     |      Return True if the geom is enabled.
     |  
     |  isSpace(...)
     |      isSpace() -> bool
     |      
     |      Return 1 if the given geom is a space, or 0 if not.
     |  
     |  setBody(...)
     |      setBody(body)
     |      
     |      Set the body associated with a placeable geom.
     |      
     |      @param body: The Body object or None.
     |      @type body: Body
     |  
     |  setCategoryBits(...)
     |      setCategoryBits(bits)
     |      
     |      Set the "category" bitfields for this geom.
     |      
     |      @param bits: Category bit field
     |      @type bits: int/long
     |  
     |  setCollideBits(...)
     |      setCollideBits(bits)
     |      
     |      Set the "collide" bitfields for this geom.
     |      
     |      @param bits: Collide bit field
     |      @type bits: int/long
     |  
     |  setPosition(...)
     |      setPosition(pos)
     |      
     |      Set the position of the geom. If the geom is attached to a body,
     |      the body's position will also be changed.
     |      
     |      @param pos: Position
     |      @type pos: 3-sequence of floats
     |  
     |  setQuaternion(...)
     |      setQuaternion(q)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param q: Quaternion (w,x,y,z)
     |      @type q: 4-sequence of floats
     |  
     |  setRotation(...)
     |      setRotation(R)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param R: Rotation matrix
     |      @type R: 9-sequence of floats
    
    class GeomObject(__builtin__.object)
     |  This is the abstract base class for all geom objects.
     |  
     |  Methods defined here:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  disable(...)
     |      disable()
     |      
     |      Disable the geom.
     |  
     |  enable(...)
     |      enable()
     |      
     |      Enable the geom.
     |  
     |  getAABB(...)
     |      getAABB() -> 6-tuple
     |      
     |      Return an axis aligned bounding box that surrounds the geom.
     |      The return value is a 6-tuple (minx, maxx, miny, maxy, minz, maxz).
     |  
     |  getBody(...)
     |      getBody() -> Body
     |      
     |      Get the body associated with this geom.
     |  
     |  getCategoryBits(...)
     |      getCategoryBits() -> long
     |      
     |      Return the "category" bitfields for this geom.
     |  
     |  getCollideBits(...)
     |      getCollideBits() -> long
     |      
     |      Return the "collide" bitfields for this geom.
     |  
     |  getPosition(...)
     |      getPosition() -> 3-tuple
     |      
     |      Get the current position of the geom. If the geom is attached to
     |      a body the returned value is the body's position.
     |  
     |  getQuaternion(...)
     |      getQuaternion() -> (w,x,y,z)
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getRotation(...)
     |      getRotation() -> 9-tuple
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getSpace(...)
     |      getSpace() -> Space
     |      
     |      Return the space that the given geometry is contained in,
     |      or return None if it is not contained in any space.
     |  
     |  isEnabled(...)
     |      isEnabled() -> bool
     |      
     |      Return True if the geom is enabled.
     |  
     |  isSpace(...)
     |      isSpace() -> bool
     |      
     |      Return 1 if the given geom is a space, or 0 if not.
     |  
     |  placeable(...)
     |      placeable() -> bool
     |      
     |      Returns True if the geom object is a placeable geom.
     |      
     |      This method has to be overwritten in derived methods.
     |  
     |  setBody(...)
     |      setBody(body)
     |      
     |      Set the body associated with a placeable geom.
     |      
     |      @param body: The Body object or None.
     |      @type body: Body
     |  
     |  setCategoryBits(...)
     |      setCategoryBits(bits)
     |      
     |      Set the "category" bitfields for this geom.
     |      
     |      @param bits: Category bit field
     |      @type bits: int/long
     |  
     |  setCollideBits(...)
     |      setCollideBits(bits)
     |      
     |      Set the "collide" bitfields for this geom.
     |      
     |      @param bits: Collide bit field
     |      @type bits: int/long
     |  
     |  setPosition(...)
     |      setPosition(pos)
     |      
     |      Set the position of the geom. If the geom is attached to a body,
     |      the body's position will also be changed.
     |      
     |      @param pos: Position
     |      @type pos: 3-sequence of floats
     |  
     |  setQuaternion(...)
     |      setQuaternion(q)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param q: Quaternion (w,x,y,z)
     |      @type q: 4-sequence of floats
     |  
     |  setRotation(...)
     |      setRotation(R)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param R: Rotation matrix
     |      @type R: 9-sequence of floats
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class GeomPlane(GeomObject)
     |  Plane geometry.
     |  
     |  This class represents an infinite plane. The plane equation is:
     |  n.x*x + n.y*y + n.z*z = dist
     |  
     |  This object can't be attached to a body.
     |  If you call getBody() on this object it always returns ode.environment.
     |  
     |  Constructor::
     |  
     |    GeomPlane(space=None, normal=(0,0,1), dist=0)
     |  
     |  Method resolution order:
     |      GeomPlane
     |      GeomObject
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  getParams(...)
     |  
     |  pointDepth(...)
     |      pointDepth(p) -> float
     |      
     |      Return the depth of the point p in the plane. Points inside the
     |      geom will have positive depth, points outside it will have
     |      negative depth, and points on the surface will have zero
     |      depth.
     |      
     |      @param p: Point
     |      @type p: 3-sequence of floats
     |  
     |  setParams(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from GeomObject:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  disable(...)
     |      disable()
     |      
     |      Disable the geom.
     |  
     |  enable(...)
     |      enable()
     |      
     |      Enable the geom.
     |  
     |  getAABB(...)
     |      getAABB() -> 6-tuple
     |      
     |      Return an axis aligned bounding box that surrounds the geom.
     |      The return value is a 6-tuple (minx, maxx, miny, maxy, minz, maxz).
     |  
     |  getBody(...)
     |      getBody() -> Body
     |      
     |      Get the body associated with this geom.
     |  
     |  getCategoryBits(...)
     |      getCategoryBits() -> long
     |      
     |      Return the "category" bitfields for this geom.
     |  
     |  getCollideBits(...)
     |      getCollideBits() -> long
     |      
     |      Return the "collide" bitfields for this geom.
     |  
     |  getPosition(...)
     |      getPosition() -> 3-tuple
     |      
     |      Get the current position of the geom. If the geom is attached to
     |      a body the returned value is the body's position.
     |  
     |  getQuaternion(...)
     |      getQuaternion() -> (w,x,y,z)
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getRotation(...)
     |      getRotation() -> 9-tuple
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getSpace(...)
     |      getSpace() -> Space
     |      
     |      Return the space that the given geometry is contained in,
     |      or return None if it is not contained in any space.
     |  
     |  isEnabled(...)
     |      isEnabled() -> bool
     |      
     |      Return True if the geom is enabled.
     |  
     |  isSpace(...)
     |      isSpace() -> bool
     |      
     |      Return 1 if the given geom is a space, or 0 if not.
     |  
     |  placeable(...)
     |      placeable() -> bool
     |      
     |      Returns True if the geom object is a placeable geom.
     |      
     |      This method has to be overwritten in derived methods.
     |  
     |  setBody(...)
     |      setBody(body)
     |      
     |      Set the body associated with a placeable geom.
     |      
     |      @param body: The Body object or None.
     |      @type body: Body
     |  
     |  setCategoryBits(...)
     |      setCategoryBits(bits)
     |      
     |      Set the "category" bitfields for this geom.
     |      
     |      @param bits: Category bit field
     |      @type bits: int/long
     |  
     |  setCollideBits(...)
     |      setCollideBits(bits)
     |      
     |      Set the "collide" bitfields for this geom.
     |      
     |      @param bits: Collide bit field
     |      @type bits: int/long
     |  
     |  setPosition(...)
     |      setPosition(pos)
     |      
     |      Set the position of the geom. If the geom is attached to a body,
     |      the body's position will also be changed.
     |      
     |      @param pos: Position
     |      @type pos: 3-sequence of floats
     |  
     |  setQuaternion(...)
     |      setQuaternion(q)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param q: Quaternion (w,x,y,z)
     |      @type q: 4-sequence of floats
     |  
     |  setRotation(...)
     |      setRotation(R)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param R: Rotation matrix
     |      @type R: 9-sequence of floats
    
    class GeomRay(GeomObject)
     |  Ray object.
     |  
     |  A ray is different from all the other geom classes in that it does
     |  not represent a solid object. It is an infinitely thin line that
     |  starts from the geom's position and extends in the direction of
     |  the geom's local Z-axis.
     |  
     |  Constructor::
     |  
     |    GeomRay(space=None, rlen=1.0)
     |  
     |  Method resolution order:
     |      GeomRay
     |      GeomObject
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  get(...)
     |      get() -> ((p[0], p[1], p[2]), (u[0], u[1], u[2]))
     |      
     |      Return the position and rotation as a pair of
     |      tuples.
     |      
     |      @returns: position and rotation
     |  
     |  getLength(...)
     |      getLength() -> length
     |      
     |      Get the length of the ray.
     |      
     |      @returns: length of the ray (float)
     |  
     |  placeable(...)
     |  
     |  set(...)
     |      set(p, u)
     |      
     |      Set the position and rotation of a ray.
     |      
     |      @param p: position
     |      @type p: 3-sequence of floats
     |      @param u: rotation
     |      @type u: 3-sequence of floats
     |  
     |  setLength(...)
     |      setLength(rlen)
     |      
     |      Set length of the ray.
     |      
     |      @param rlen: length of the ray
     |      @type rlen: float
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from GeomObject:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  disable(...)
     |      disable()
     |      
     |      Disable the geom.
     |  
     |  enable(...)
     |      enable()
     |      
     |      Enable the geom.
     |  
     |  getAABB(...)
     |      getAABB() -> 6-tuple
     |      
     |      Return an axis aligned bounding box that surrounds the geom.
     |      The return value is a 6-tuple (minx, maxx, miny, maxy, minz, maxz).
     |  
     |  getBody(...)
     |      getBody() -> Body
     |      
     |      Get the body associated with this geom.
     |  
     |  getCategoryBits(...)
     |      getCategoryBits() -> long
     |      
     |      Return the "category" bitfields for this geom.
     |  
     |  getCollideBits(...)
     |      getCollideBits() -> long
     |      
     |      Return the "collide" bitfields for this geom.
     |  
     |  getPosition(...)
     |      getPosition() -> 3-tuple
     |      
     |      Get the current position of the geom. If the geom is attached to
     |      a body the returned value is the body's position.
     |  
     |  getQuaternion(...)
     |      getQuaternion() -> (w,x,y,z)
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getRotation(...)
     |      getRotation() -> 9-tuple
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getSpace(...)
     |      getSpace() -> Space
     |      
     |      Return the space that the given geometry is contained in,
     |      or return None if it is not contained in any space.
     |  
     |  isEnabled(...)
     |      isEnabled() -> bool
     |      
     |      Return True if the geom is enabled.
     |  
     |  isSpace(...)
     |      isSpace() -> bool
     |      
     |      Return 1 if the given geom is a space, or 0 if not.
     |  
     |  setBody(...)
     |      setBody(body)
     |      
     |      Set the body associated with a placeable geom.
     |      
     |      @param body: The Body object or None.
     |      @type body: Body
     |  
     |  setCategoryBits(...)
     |      setCategoryBits(bits)
     |      
     |      Set the "category" bitfields for this geom.
     |      
     |      @param bits: Category bit field
     |      @type bits: int/long
     |  
     |  setCollideBits(...)
     |      setCollideBits(bits)
     |      
     |      Set the "collide" bitfields for this geom.
     |      
     |      @param bits: Collide bit field
     |      @type bits: int/long
     |  
     |  setPosition(...)
     |      setPosition(pos)
     |      
     |      Set the position of the geom. If the geom is attached to a body,
     |      the body's position will also be changed.
     |      
     |      @param pos: Position
     |      @type pos: 3-sequence of floats
     |  
     |  setQuaternion(...)
     |      setQuaternion(q)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param q: Quaternion (w,x,y,z)
     |      @type q: 4-sequence of floats
     |  
     |  setRotation(...)
     |      setRotation(R)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param R: Rotation matrix
     |      @type R: 9-sequence of floats
    
    class GeomSphere(GeomObject)
     |  Sphere geometry.
     |  
     |  This class represents a sphere centered at the origin.
     |  
     |  Constructor::
     |  
     |    GeomSphere(space=None, radius=1.0)
     |  
     |  Method resolution order:
     |      GeomSphere
     |      GeomObject
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  getRadius(...)
     |      getRadius() -> float
     |      
     |      Return the radius of the sphere.
     |  
     |  placeable(...)
     |  
     |  pointDepth(...)
     |      pointDepth(p) -> float
     |      
     |      Return the depth of the point p in the sphere. Points inside
     |      the geom will have positive depth, points outside it will have
     |      negative depth, and points on the surface will have zero
     |      depth.
     |      
     |      @param p: Point
     |      @type p: 3-sequence of floats
     |  
     |  setRadius(...)
     |      setRadius(radius)
     |      
     |      Set the radius of the sphere.
     |      
     |      @param radius: New radius
     |      @type radius: float
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from GeomObject:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  disable(...)
     |      disable()
     |      
     |      Disable the geom.
     |  
     |  enable(...)
     |      enable()
     |      
     |      Enable the geom.
     |  
     |  getAABB(...)
     |      getAABB() -> 6-tuple
     |      
     |      Return an axis aligned bounding box that surrounds the geom.
     |      The return value is a 6-tuple (minx, maxx, miny, maxy, minz, maxz).
     |  
     |  getBody(...)
     |      getBody() -> Body
     |      
     |      Get the body associated with this geom.
     |  
     |  getCategoryBits(...)
     |      getCategoryBits() -> long
     |      
     |      Return the "category" bitfields for this geom.
     |  
     |  getCollideBits(...)
     |      getCollideBits() -> long
     |      
     |      Return the "collide" bitfields for this geom.
     |  
     |  getPosition(...)
     |      getPosition() -> 3-tuple
     |      
     |      Get the current position of the geom. If the geom is attached to
     |      a body the returned value is the body's position.
     |  
     |  getQuaternion(...)
     |      getQuaternion() -> (w,x,y,z)
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getRotation(...)
     |      getRotation() -> 9-tuple
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getSpace(...)
     |      getSpace() -> Space
     |      
     |      Return the space that the given geometry is contained in,
     |      or return None if it is not contained in any space.
     |  
     |  isEnabled(...)
     |      isEnabled() -> bool
     |      
     |      Return True if the geom is enabled.
     |  
     |  isSpace(...)
     |      isSpace() -> bool
     |      
     |      Return 1 if the given geom is a space, or 0 if not.
     |  
     |  setBody(...)
     |      setBody(body)
     |      
     |      Set the body associated with a placeable geom.
     |      
     |      @param body: The Body object or None.
     |      @type body: Body
     |  
     |  setCategoryBits(...)
     |      setCategoryBits(bits)
     |      
     |      Set the "category" bitfields for this geom.
     |      
     |      @param bits: Category bit field
     |      @type bits: int/long
     |  
     |  setCollideBits(...)
     |      setCollideBits(bits)
     |      
     |      Set the "collide" bitfields for this geom.
     |      
     |      @param bits: Collide bit field
     |      @type bits: int/long
     |  
     |  setPosition(...)
     |      setPosition(pos)
     |      
     |      Set the position of the geom. If the geom is attached to a body,
     |      the body's position will also be changed.
     |      
     |      @param pos: Position
     |      @type pos: 3-sequence of floats
     |  
     |  setQuaternion(...)
     |      setQuaternion(q)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param q: Quaternion (w,x,y,z)
     |      @type q: 4-sequence of floats
     |  
     |  setRotation(...)
     |      setRotation(R)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param R: Rotation matrix
     |      @type R: 9-sequence of floats
    
    class GeomTransform(GeomObject)
     |  GeomTransform.
     |  
     |  A geometry transform "T" is a geom that encapsulates another geom
     |  "E", allowing E to be positioned and rotated arbitrarily with
     |  respect to its point of reference.
     |  
     |  Constructor::
     |  
     |    GeomTransform(space=None)
     |  
     |  Method resolution order:
     |      GeomTransform
     |      GeomObject
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  getGeom(...)
     |      getGeom() -> GeomObject
     |      
     |      Get the geom that the geometry transform encapsulates.
     |  
     |  getInfo(...)
     |      getInfo() -> int
     |      
     |      Get the "information" mode of the geometry transform (0 or 1).
     |      
     |      With mode 0, when a transform object is collided with another
     |      object, the geom field of the ContactGeom structure is set to the
     |      geom that is encapsulated by the transform object.
     |      
     |      With mode 1, the geom field of the ContactGeom structure is set
     |      to the transform object itself.
     |  
     |  placeable(...)
     |  
     |  setGeom(...)
     |      setGeom(geom)
     |      
     |      Set the geom that the geometry transform encapsulates.
     |      A ValueError exception is thrown if a) the geom is not placeable,
     |      b) the geom was already inserted into a space or c) the geom is
     |      already associated with a body.
     |      
     |      @param geom: Geom object to encapsulate
     |      @type geom: GeomObject
     |  
     |  setInfo(...)
     |      setInfo(mode)
     |      
     |      Set the "information" mode of the geometry transform.
     |      
     |      With mode 0, when a transform object is collided with another
     |      object, the geom field of the ContactGeom structure is set to the
     |      geom that is encapsulated by the transform object.
     |      
     |      With mode 1, the geom field of the ContactGeom structure is set
     |      to the transform object itself.
     |      
     |      @param mode: Information mode (0 or 1)
     |      @type mode: int
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from GeomObject:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  disable(...)
     |      disable()
     |      
     |      Disable the geom.
     |  
     |  enable(...)
     |      enable()
     |      
     |      Enable the geom.
     |  
     |  getAABB(...)
     |      getAABB() -> 6-tuple
     |      
     |      Return an axis aligned bounding box that surrounds the geom.
     |      The return value is a 6-tuple (minx, maxx, miny, maxy, minz, maxz).
     |  
     |  getBody(...)
     |      getBody() -> Body
     |      
     |      Get the body associated with this geom.
     |  
     |  getCategoryBits(...)
     |      getCategoryBits() -> long
     |      
     |      Return the "category" bitfields for this geom.
     |  
     |  getCollideBits(...)
     |      getCollideBits() -> long
     |      
     |      Return the "collide" bitfields for this geom.
     |  
     |  getPosition(...)
     |      getPosition() -> 3-tuple
     |      
     |      Get the current position of the geom. If the geom is attached to
     |      a body the returned value is the body's position.
     |  
     |  getQuaternion(...)
     |      getQuaternion() -> (w,x,y,z)
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getRotation(...)
     |      getRotation() -> 9-tuple
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getSpace(...)
     |      getSpace() -> Space
     |      
     |      Return the space that the given geometry is contained in,
     |      or return None if it is not contained in any space.
     |  
     |  isEnabled(...)
     |      isEnabled() -> bool
     |      
     |      Return True if the geom is enabled.
     |  
     |  isSpace(...)
     |      isSpace() -> bool
     |      
     |      Return 1 if the given geom is a space, or 0 if not.
     |  
     |  setBody(...)
     |      setBody(body)
     |      
     |      Set the body associated with a placeable geom.
     |      
     |      @param body: The Body object or None.
     |      @type body: Body
     |  
     |  setCategoryBits(...)
     |      setCategoryBits(bits)
     |      
     |      Set the "category" bitfields for this geom.
     |      
     |      @param bits: Category bit field
     |      @type bits: int/long
     |  
     |  setCollideBits(...)
     |      setCollideBits(bits)
     |      
     |      Set the "collide" bitfields for this geom.
     |      
     |      @param bits: Collide bit field
     |      @type bits: int/long
     |  
     |  setPosition(...)
     |      setPosition(pos)
     |      
     |      Set the position of the geom. If the geom is attached to a body,
     |      the body's position will also be changed.
     |      
     |      @param pos: Position
     |      @type pos: 3-sequence of floats
     |  
     |  setQuaternion(...)
     |      setQuaternion(q)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param q: Quaternion (w,x,y,z)
     |      @type q: 4-sequence of floats
     |  
     |  setRotation(...)
     |      setRotation(R)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param R: Rotation matrix
     |      @type R: 9-sequence of floats
    
    class GeomTriMesh(GeomObject)
     |  TriMesh object.
     |  
     |  To construct the trimesh geom you need a TriMeshData object that
     |  stores the actual mesh. This object has to be passed as first
     |  argument to the constructor.
     |  
     |  Constructor::
     |  
     |    GeomTriMesh(data, space=None)
     |  
     |  Method resolution order:
     |      GeomTriMesh
     |      GeomObject
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  clearTCCache(...)
     |      clearTCCache()
     |      
     |      Clears the internal temporal coherence caches.
     |  
     |  getTriangle(...)
     |      getTriangle(idx) -> (v0, v1, v2)
     |      
     |      @param idx: Triangle index
     |      @type idx: int
     |  
     |  getTriangleCount(...)
     |      getTriangleCount() -> n
     |      
     |      Returns the number of triangles in the TriMesh.
     |  
     |  placeable(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from GeomObject:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  disable(...)
     |      disable()
     |      
     |      Disable the geom.
     |  
     |  enable(...)
     |      enable()
     |      
     |      Enable the geom.
     |  
     |  getAABB(...)
     |      getAABB() -> 6-tuple
     |      
     |      Return an axis aligned bounding box that surrounds the geom.
     |      The return value is a 6-tuple (minx, maxx, miny, maxy, minz, maxz).
     |  
     |  getBody(...)
     |      getBody() -> Body
     |      
     |      Get the body associated with this geom.
     |  
     |  getCategoryBits(...)
     |      getCategoryBits() -> long
     |      
     |      Return the "category" bitfields for this geom.
     |  
     |  getCollideBits(...)
     |      getCollideBits() -> long
     |      
     |      Return the "collide" bitfields for this geom.
     |  
     |  getPosition(...)
     |      getPosition() -> 3-tuple
     |      
     |      Get the current position of the geom. If the geom is attached to
     |      a body the returned value is the body's position.
     |  
     |  getQuaternion(...)
     |      getQuaternion() -> (w,x,y,z)
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getRotation(...)
     |      getRotation() -> 9-tuple
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getSpace(...)
     |      getSpace() -> Space
     |      
     |      Return the space that the given geometry is contained in,
     |      or return None if it is not contained in any space.
     |  
     |  isEnabled(...)
     |      isEnabled() -> bool
     |      
     |      Return True if the geom is enabled.
     |  
     |  isSpace(...)
     |      isSpace() -> bool
     |      
     |      Return 1 if the given geom is a space, or 0 if not.
     |  
     |  setBody(...)
     |      setBody(body)
     |      
     |      Set the body associated with a placeable geom.
     |      
     |      @param body: The Body object or None.
     |      @type body: Body
     |  
     |  setCategoryBits(...)
     |      setCategoryBits(bits)
     |      
     |      Set the "category" bitfields for this geom.
     |      
     |      @param bits: Category bit field
     |      @type bits: int/long
     |  
     |  setCollideBits(...)
     |      setCollideBits(bits)
     |      
     |      Set the "collide" bitfields for this geom.
     |      
     |      @param bits: Collide bit field
     |      @type bits: int/long
     |  
     |  setPosition(...)
     |      setPosition(pos)
     |      
     |      Set the position of the geom. If the geom is attached to a body,
     |      the body's position will also be changed.
     |      
     |      @param pos: Position
     |      @type pos: 3-sequence of floats
     |  
     |  setQuaternion(...)
     |      setQuaternion(q)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param q: Quaternion (w,x,y,z)
     |      @type q: 4-sequence of floats
     |  
     |  setRotation(...)
     |      setRotation(R)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param R: Rotation matrix
     |      @type R: 9-sequence of floats
    
    class HashSpace(SpaceBase)
     |  Multi-resolution hash table space.
     |  
     |  This uses an internal data structure that records how each geom
     |  overlaps cells in one of several three dimensional grids. Each
     |  grid has cubical cells of side lengths 2**i, where i is an integer
     |  that ranges from a minimum to a maximum value. The time required
     |  to do intersection testing for n objects is O(n) (as long as those
     |  objects are not clustered together too closely), as each object
     |  can be quickly paired with the objects around it.
     |  
     |  Method resolution order:
     |      HashSpace
     |      SpaceBase
     |      GeomObject
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  getLevels(...)
     |      getLevels() -> (minlevel, maxlevel)
     |      
     |      Gets the size of the smallest and largest cell used in the
     |      hash table. The actual size is 2^minlevel and 2^maxlevel
     |      respectively.
     |  
     |  setLevels(...)
     |      setLevels(minlevel, maxlevel)
     |      
     |      Sets the size of the smallest and largest cell used in the
     |      hash table. The actual size will be 2^minlevel and 2^maxlevel
     |      respectively.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SpaceBase:
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  add(...)
     |      add(geom)
     |      
     |      Add a geom to a space. This does nothing if the geom is
     |      already in the space.
     |      
     |      @param geom: Geom object to add
     |      @type geom: GeomObject
     |  
     |  collide(...)
     |      collide(arg, callback)
     |      
     |      Call a callback function one or more times, for all
     |      potentially intersecting objects in the space. The callback
     |      function takes 3 arguments:
     |      
     |      def NearCallback(arg, geom1, geom2):
     |      
     |      The arg parameter is just passed on to the callback function.
     |      Its meaning is user defined. The geom1 and geom2 arguments are
     |      the geometry objects that may be near each other. The callback
     |      function can call the function collide() (not the Space
     |      method) on geom1 and geom2, perhaps first determining
     |      whether to collide them at all based on other information.
     |      
     |      @param arg: A user argument that is passed to the callback function
     |      @param callback: Callback function
     |      @type callback: callable
     |  
     |  getGeom(...)
     |      getGeom(idx) -> GeomObject
     |      
     |      Return the geom with the given index contained within the space.
     |      
     |      @param idx: Geom index (0,1,...,getNumGeoms()-1)
     |      @type idx: int
     |  
     |  getNumGeoms(...)
     |      getNumGeoms() -> int
     |      
     |      Return the number of geoms contained within the space.
     |  
     |  query(...)
     |      query(geom) -> bool
     |      
     |      Return True if the given geom is in the space.
     |      
     |      @param geom: Geom object to check
     |      @type geom: GeomObject
     |  
     |  remove(...)
     |      remove(geom)
     |      
     |      Remove a geom from a space.
     |      
     |      @param geom: Geom object to remove
     |      @type geom: GeomObject
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from GeomObject:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  disable(...)
     |      disable()
     |      
     |      Disable the geom.
     |  
     |  enable(...)
     |      enable()
     |      
     |      Enable the geom.
     |  
     |  getAABB(...)
     |      getAABB() -> 6-tuple
     |      
     |      Return an axis aligned bounding box that surrounds the geom.
     |      The return value is a 6-tuple (minx, maxx, miny, maxy, minz, maxz).
     |  
     |  getBody(...)
     |      getBody() -> Body
     |      
     |      Get the body associated with this geom.
     |  
     |  getCategoryBits(...)
     |      getCategoryBits() -> long
     |      
     |      Return the "category" bitfields for this geom.
     |  
     |  getCollideBits(...)
     |      getCollideBits() -> long
     |      
     |      Return the "collide" bitfields for this geom.
     |  
     |  getPosition(...)
     |      getPosition() -> 3-tuple
     |      
     |      Get the current position of the geom. If the geom is attached to
     |      a body the returned value is the body's position.
     |  
     |  getQuaternion(...)
     |      getQuaternion() -> (w,x,y,z)
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getRotation(...)
     |      getRotation() -> 9-tuple
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getSpace(...)
     |      getSpace() -> Space
     |      
     |      Return the space that the given geometry is contained in,
     |      or return None if it is not contained in any space.
     |  
     |  isEnabled(...)
     |      isEnabled() -> bool
     |      
     |      Return True if the geom is enabled.
     |  
     |  isSpace(...)
     |      isSpace() -> bool
     |      
     |      Return 1 if the given geom is a space, or 0 if not.
     |  
     |  placeable(...)
     |      placeable() -> bool
     |      
     |      Returns True if the geom object is a placeable geom.
     |      
     |      This method has to be overwritten in derived methods.
     |  
     |  setBody(...)
     |      setBody(body)
     |      
     |      Set the body associated with a placeable geom.
     |      
     |      @param body: The Body object or None.
     |      @type body: Body
     |  
     |  setCategoryBits(...)
     |      setCategoryBits(bits)
     |      
     |      Set the "category" bitfields for this geom.
     |      
     |      @param bits: Category bit field
     |      @type bits: int/long
     |  
     |  setCollideBits(...)
     |      setCollideBits(bits)
     |      
     |      Set the "collide" bitfields for this geom.
     |      
     |      @param bits: Collide bit field
     |      @type bits: int/long
     |  
     |  setPosition(...)
     |      setPosition(pos)
     |      
     |      Set the position of the geom. If the geom is attached to a body,
     |      the body's position will also be changed.
     |      
     |      @param pos: Position
     |      @type pos: 3-sequence of floats
     |  
     |  setQuaternion(...)
     |      setQuaternion(q)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param q: Quaternion (w,x,y,z)
     |      @type q: 4-sequence of floats
     |  
     |  setRotation(...)
     |      setRotation(R)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param R: Rotation matrix
     |      @type R: 9-sequence of floats
    
    class HeightfieldData(__builtin__.object)
     |  This class is used to store heightfield data.
     |  
     |  Methods defined here:
     |  
     |  build_callback(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class Hinge2Joint(Joint)
     |  Hinge2 joint.
     |  
     |  Constructor::
     |  
     |    Hinge2Joint(world, jointgroup=None)
     |  
     |  Method resolution order:
     |      Hinge2Joint
     |      Joint
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addTorques(...)
     |      addTorques(torque1, torque2)
     |      
     |      Applies torque1 about axis 1, and torque2 about axis 2.
     |      
     |      @param torque1: Torque 1 magnitude
     |      @param torque2: Torque 2 magnitude
     |      @type torque1: float
     |      @type torque2: float
     |  
     |  getAnchor(...)
     |      getAnchor() -> 3-tuple of floats
     |      
     |      Get the joint anchor point, in world coordinates. This returns
     |      the point on body 1. If the joint is perfectly satisfied, this
     |      will be the same as the point on body 2.
     |  
     |  getAnchor2(...)
     |      getAnchor2() -> 3-tuple of floats
     |      
     |      Get the joint anchor point, in world coordinates. This returns
     |      the point on body 2. If the joint is perfectly satisfied, this
     |      will be the same as the point on body 1.
     |  
     |  getAngle1(...)
     |      getAngle1() -> float
     |      
     |      Get the first hinge-2 angle (around axis 1).
     |      
     |      When the anchor or axis is set, the current position of the
     |      attached bodies is examined and that position will be the zero
     |      angle.
     |  
     |  getAngle1Rate(...)
     |      getAngle1Rate() -> float
     |      
     |      Get the time derivative of the first hinge-2 angle.
     |  
     |  getAngle2Rate(...)
     |      getAngle2Rate() -> float
     |      
     |      Get the time derivative of the second hinge-2 angle.
     |  
     |  getAxis1(...)
     |      getAxis1() -> 3-tuple of floats
     |      
     |      Get the first hinge-2 axis.
     |  
     |  getAxis2(...)
     |      getAxis2() -> 3-tuple of floats
     |      
     |      Get the second hinge-2 axis.
     |  
     |  setAnchor(...)
     |      setAnchor(pos)
     |      
     |      Set the hinge-2 anchor.
     |      
     |      @param pos: Anchor position
     |      @type pos: 3-sequence of floats
     |  
     |  setAxis1(...)
     |      setAxis1(axis)
     |      
     |      Set the first hinge-2 axis. Axis 1 and axis 2 must not lie
     |      along the same line.
     |      
     |      @param axis: Joint axis
     |      @type axis: 3-sequence of floats
     |  
     |  setAxis2(...)
     |      setAxis2(axis)
     |      
     |      Set the second hinge-2 axis. Axis 1 and axis 2 must not lie
     |      along the same line.
     |      
     |      @param axis: Joint axis
     |      @type axis: 3-sequence of floats
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Joint:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  attach(...)
     |      attach(body1, body2)
     |      
     |      Attach the joint to some new bodies. A body can be attached
     |      to the environment by passing None as second body.
     |      
     |      @param body1: First body
     |      @param body2: Second body
     |      @type body1: Body
     |      @type body2: Body
     |  
     |  disable(...)
     |  
     |  enable(...)
     |  
     |  getBody(...)
     |      getBody(index) -> Body
     |      
     |      Return the bodies that this joint connects. If index is 0 the
     |      "first" body will be returned, corresponding to the body1
     |      argument of the attach() method. If index is 1 the "second" body
     |      will be returned, corresponding to the body2 argument of the
     |      attach() method.
     |      
     |      @param index: Bodx index (0 or 1).
     |      @type index: int
     |  
     |  getFeedback(...)
     |      getFeedback() -> (force1, torque1, force2, torque2)
     |      
     |      Get the forces/torques applied by the joint. If feedback is
     |      activated (i.e. setFeedback(True) was called) then this method
     |      returns a tuple (force1, torque1, force2, torque2) with the
     |      forces and torques applied to body 1 and body 2.  The
     |      forces/torques are given as 3-tuples.
     |      
     |      If feedback is deactivated then the method always returns None.
     |  
     |  getParam(...)
     |      getParam(param) -> float
     |      
     |      Get limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to read
     |      @type param: int
     |  
     |  isEnabled(...)
     |  
     |  setFeedback(...)
     |      setFeedback(flag=True)
     |      
     |      Create a feedback buffer. If flag is True then a buffer is
     |      allocated and the forces/torques applied by the joint can
     |      be read using the getFeedback() method. If flag is False the
     |      buffer is released.
     |      
     |      @param flag: Specifies whether a buffer should be created or released
     |      @type flag: bool
     |  
     |  setParam(...)
     |      setParam(param, value)
     |      
     |      Set limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to set
     |      @param value: Parameter value
     |      @type param: int
     |      @type value: float
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Joint:
     |  
     |  param
    
    class HingeJoint(Joint)
     |  Hinge joint.
     |  
     |  Constructor::
     |  
     |    HingeJoint(world, jointgroup=None)
     |  
     |  Method resolution order:
     |      HingeJoint
     |      Joint
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addTorque(...)
     |      addTorque(torque)
     |      
     |      Applies the torque about the hinge axis.
     |      
     |      @param torque: Torque magnitude
     |      @type torque: float
     |  
     |  getAnchor(...)
     |      getAnchor() -> 3-tuple of floats
     |      
     |      Get the joint anchor point, in world coordinates. This returns
     |      the point on body 1. If the joint is perfectly satisfied, this
     |      will be the same as the point on body 2.
     |  
     |  getAnchor2(...)
     |      getAnchor2() -> 3-tuple of floats
     |      
     |      Get the joint anchor point, in world coordinates. This returns
     |      the point on body 2. If the joint is perfectly satisfied, this
     |      will be the same as the point on body 1.
     |  
     |  getAngle(...)
     |      getAngle() -> float
     |      
     |      Get the hinge angle. The angle is measured between the two
     |      bodies, or between the body and the static environment. The
     |      angle will be between -pi..pi.
     |      
     |      When the hinge anchor or axis is set, the current position of
     |      the attached bodies is examined and that position will be the
     |      zero angle.
     |  
     |  getAngleRate(...)
     |      getAngleRate() -> float
     |      
     |      Get the time derivative of the angle.
     |  
     |  getAxis(...)
     |      getAxis() -> 3-tuple of floats
     |      
     |      Get the hinge axis.
     |  
     |  setAnchor(...)
     |      setAnchor(pos)
     |      
     |      Set the hinge anchor which must be given in world coordinates.
     |      
     |      @param pos: Anchor position
     |      @type pos: 3-sequence of floats
     |  
     |  setAngleOffset(...)
     |      setAngleOffset(axis)
     |      
     |      Set the angle offset.
     |  
     |  setAxis(...)
     |      setAxis(axis)
     |      
     |      Set the hinge axis.
     |      
     |      @param axis: Hinge axis
     |      @type axis: 3-sequence of floats
     |  
     |  setAxisAndAngleOffset(...)
     |      setAxisAndAngleOffset(axis)
     |      
     |      Set the hinge axis and angle offset.
     |      Wraps dJointSetHingeAxisOffset.
     |      
     |      @param axis: Hinge axis
     |      @type axis: 3-sequence of floats
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Joint:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  attach(...)
     |      attach(body1, body2)
     |      
     |      Attach the joint to some new bodies. A body can be attached
     |      to the environment by passing None as second body.
     |      
     |      @param body1: First body
     |      @param body2: Second body
     |      @type body1: Body
     |      @type body2: Body
     |  
     |  disable(...)
     |  
     |  enable(...)
     |  
     |  getBody(...)
     |      getBody(index) -> Body
     |      
     |      Return the bodies that this joint connects. If index is 0 the
     |      "first" body will be returned, corresponding to the body1
     |      argument of the attach() method. If index is 1 the "second" body
     |      will be returned, corresponding to the body2 argument of the
     |      attach() method.
     |      
     |      @param index: Bodx index (0 or 1).
     |      @type index: int
     |  
     |  getFeedback(...)
     |      getFeedback() -> (force1, torque1, force2, torque2)
     |      
     |      Get the forces/torques applied by the joint. If feedback is
     |      activated (i.e. setFeedback(True) was called) then this method
     |      returns a tuple (force1, torque1, force2, torque2) with the
     |      forces and torques applied to body 1 and body 2.  The
     |      forces/torques are given as 3-tuples.
     |      
     |      If feedback is deactivated then the method always returns None.
     |  
     |  getParam(...)
     |      getParam(param) -> float
     |      
     |      Get limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to read
     |      @type param: int
     |  
     |  isEnabled(...)
     |  
     |  setFeedback(...)
     |      setFeedback(flag=True)
     |      
     |      Create a feedback buffer. If flag is True then a buffer is
     |      allocated and the forces/torques applied by the joint can
     |      be read using the getFeedback() method. If flag is False the
     |      buffer is released.
     |      
     |      @param flag: Specifies whether a buffer should be created or released
     |      @type flag: bool
     |  
     |  setParam(...)
     |      setParam(param, value)
     |      
     |      Set limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to set
     |      @param value: Parameter value
     |      @type param: int
     |      @type value: float
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Joint:
     |  
     |  param
    
    class Joint(__builtin__.object)
     |  Base class for all joint classes.
     |  
     |  Methods defined here:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  attach(...)
     |      attach(body1, body2)
     |      
     |      Attach the joint to some new bodies. A body can be attached
     |      to the environment by passing None as second body.
     |      
     |      @param body1: First body
     |      @param body2: Second body
     |      @type body1: Body
     |      @type body2: Body
     |  
     |  disable(...)
     |  
     |  enable(...)
     |  
     |  getBody(...)
     |      getBody(index) -> Body
     |      
     |      Return the bodies that this joint connects. If index is 0 the
     |      "first" body will be returned, corresponding to the body1
     |      argument of the attach() method. If index is 1 the "second" body
     |      will be returned, corresponding to the body2 argument of the
     |      attach() method.
     |      
     |      @param index: Bodx index (0 or 1).
     |      @type index: int
     |  
     |  getFeedback(...)
     |      getFeedback() -> (force1, torque1, force2, torque2)
     |      
     |      Get the forces/torques applied by the joint. If feedback is
     |      activated (i.e. setFeedback(True) was called) then this method
     |      returns a tuple (force1, torque1, force2, torque2) with the
     |      forces and torques applied to body 1 and body 2.  The
     |      forces/torques are given as 3-tuples.
     |      
     |      If feedback is deactivated then the method always returns None.
     |  
     |  getParam(...)
     |      getParam(param) -> float
     |      
     |      Get limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to read
     |      @type param: int
     |  
     |  isEnabled(...)
     |  
     |  setFeedback(...)
     |      setFeedback(flag=True)
     |      
     |      Create a feedback buffer. If flag is True then a buffer is
     |      allocated and the forces/torques applied by the joint can
     |      be read using the getFeedback() method. If flag is False the
     |      buffer is released.
     |      
     |      @param flag: Specifies whether a buffer should be created or released
     |      @type flag: bool
     |  
     |  setParam(...)
     |      setParam(param, value)
     |      
     |      Set limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to set
     |      @param value: Parameter value
     |      @type param: int
     |      @type value: float
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  param
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class JointGroup(__builtin__.object)
     |  Joint group.
     |  
     |  Constructor::
     |  
     |    JointGroup()
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  empty(...)
     |      empty()
     |      
     |      Destroy all joints in the group.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class JointParam(__builtin__.object)
     |  Methods defined here:
     |  
     |  __get__(...)
     |  
     |  __init__(...)
     |  
     |  __set__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class JointParams(__builtin__.object)
     |  Methods defined here:
     |  
     |  __getitem__(...)
     |  
     |  __init__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  bounce
     |  
     |  cfm
     |  
     |  fmax
     |  
     |  fudge_factor
     |  
     |  hi_stop
     |  
     |  lo_stop
     |  
     |  stop_cfm
     |  
     |  stop_erp
     |  
     |  suspension_cfm
     |  
     |  suspension_erp
     |  
     |  vel
    
    class LMotor(Joint)
     |  LMotor joint.
     |  
     |  Constructor::
     |  
     |    LMotor(world, jointgroup=None)
     |  
     |  Method resolution order:
     |      LMotor
     |      Joint
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  getAxis(...)
     |      getAxis(anum)
     |      
     |      Get an LMotor axis.
     |      
     |      @param anum: Axis index (0-2)
     |      @type anum: int
     |  
     |  getNumAxes(...)
     |      getNumAxes() -> int
     |      
     |      Get the number of angular axes that are controlled by the LMotor.
     |  
     |  setAxis(...)
     |      setAxis(anum, rel, axis)
     |      
     |      Set an LMotor axis.
     |      
     |      The anum argument selects the axis to change (0,1 or 2).
     |      Each axis can have one of three "relative orientation" modes,
     |      selected by rel:
     |      
     |      0: The axis is anchored to the global frame.
     |      1: The axis is anchored to the first body.
     |      2: The axis is anchored to the second body.
     |      
     |      @param anum: Axis number
     |      @param rel: Relative orientation mode
     |      @param axis: Axis
     |      @type anum: int
     |      @type rel: int
     |      @type axis: 3-sequence of floats
     |  
     |  setNumAxes(...)
     |      setNumAxes(num)
     |      
     |      Set the number of angular axes that will be controlled by the LMotor.
     |      num may be in the range from 0 to 3.
     |      
     |      @param num: Number of axes (0-3)
     |      @type num: int
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Joint:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  attach(...)
     |      attach(body1, body2)
     |      
     |      Attach the joint to some new bodies. A body can be attached
     |      to the environment by passing None as second body.
     |      
     |      @param body1: First body
     |      @param body2: Second body
     |      @type body1: Body
     |      @type body2: Body
     |  
     |  disable(...)
     |  
     |  enable(...)
     |  
     |  getBody(...)
     |      getBody(index) -> Body
     |      
     |      Return the bodies that this joint connects. If index is 0 the
     |      "first" body will be returned, corresponding to the body1
     |      argument of the attach() method. If index is 1 the "second" body
     |      will be returned, corresponding to the body2 argument of the
     |      attach() method.
     |      
     |      @param index: Bodx index (0 or 1).
     |      @type index: int
     |  
     |  getFeedback(...)
     |      getFeedback() -> (force1, torque1, force2, torque2)
     |      
     |      Get the forces/torques applied by the joint. If feedback is
     |      activated (i.e. setFeedback(True) was called) then this method
     |      returns a tuple (force1, torque1, force2, torque2) with the
     |      forces and torques applied to body 1 and body 2.  The
     |      forces/torques are given as 3-tuples.
     |      
     |      If feedback is deactivated then the method always returns None.
     |  
     |  getParam(...)
     |      getParam(param) -> float
     |      
     |      Get limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to read
     |      @type param: int
     |  
     |  isEnabled(...)
     |  
     |  setFeedback(...)
     |      setFeedback(flag=True)
     |      
     |      Create a feedback buffer. If flag is True then a buffer is
     |      allocated and the forces/torques applied by the joint can
     |      be read using the getFeedback() method. If flag is False the
     |      buffer is released.
     |      
     |      @param flag: Specifies whether a buffer should be created or released
     |      @type flag: bool
     |  
     |  setParam(...)
     |      setParam(param, value)
     |      
     |      Set limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to set
     |      @param value: Parameter value
     |      @type param: int
     |      @type value: float
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Joint:
     |  
     |  param
    
    class Mass(__builtin__.object)
     |  Mass parameters of a rigid body.
     |  
     |  This class stores mass parameters of a rigid body which can be
     |  accessed through the following attributes:
     |  
     |   - mass: The total mass of the body (float)
     |   - c:    The center of gravity position in body frame (3-tuple of floats)
     |   - I:    The 3x3 inertia tensor in body frame (3-tuple of 3-tuples)
     |  
     |  This class wraps the dMass structure from the C API.
     |  
     |  @ivar mass: The total mass of the body
     |  @ivar c: The center of gravity position in body frame (cx, cy, cz)
     |  @ivar I: The 3x3 inertia tensor in body frame ((I11, I12, I13), (I12, I22, I23), (I13, I23, I33))
     |  @type mass: float
     |  @type c: 3-tuple of floats
     |  @type I: 3-tuple of 3-tuples of floats
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __radd__(...)
     |      x.__radd__(y) <==> y+x
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  add(...)
     |      add(b)
     |      
     |      Add the mass b to the mass object. Masses can also be added using
     |      the + operator.
     |      
     |      @param b: The mass to add to this mass
     |      @type b: Mass
     |  
     |  adjust(...)
     |      adjust(newmass)
     |      
     |      Adjust the total mass. Given mass parameters for some object,
     |      adjust them so the total mass is now newmass. This is useful
     |      when using the setXyz() methods to set the mass parameters for
     |      certain objects - they take the object density, not the total
     |      mass.
     |      
     |      @param newmass: The new total mass
     |      @type newmass: float
     |  
     |  setBox(...)
     |      setBox(density, lx, ly, lz)
     |      
     |      Set the mass parameters to represent a box of the given
     |      dimensions and density, with the center of mass at (0,0,0)
     |      relative to the body. The side lengths of the box along the x,
     |      y and z axes are lx, ly and lz.
     |      
     |      @param density: The density of the box
     |      @param lx: The length along the x axis
     |      @param ly: The length along the y axis
     |      @param lz: The length along the z axis
     |      @type density: float
     |      @type lx: float
     |      @type ly: float
     |      @type lz: float
     |  
     |  setBoxTotal(...)
     |      setBoxTotal(total_mass, lx, ly, lz)
     |      
     |      Set the mass parameters to represent a box of the given
     |      dimensions and mass, with the center of mass at (0,0,0)
     |      relative to the body. The side lengths of the box along the x,
     |      y and z axes are lx, ly and lz.
     |      
     |      @param total_mass: The total mass of the box
     |      @param lx: The length along the x axis
     |      @param ly: The length along the y axis
     |      @param lz: The length along the z axis
     |      @type total_mass: float
     |      @type lx: float
     |      @type ly: float
     |      @type lz: float
     |  
     |  setCappedCylinder(...)
     |      setCappedCylinder(density, direction, r, h)
     |      
     |      Set the mass parameters to represent a capped cylinder of the
     |      given parameters and density, with the center of mass at
     |      (0,0,0) relative to the body. The radius of the cylinder (and
     |      the spherical cap) is r. The length of the cylinder (not
     |      counting the spherical cap) is h. The cylinder's long axis is
     |      oriented along the body's x, y or z axis according to the
     |      value of direction (1=x, 2=y, 3=z).
     |      
     |      @param density: The density of the cylinder
     |      @param direction: The direction of the cylinder (1=x axis, 2=y axis, 3=z axis)
     |      @param r: The radius of the cylinder
     |      @param h: The length of the cylinder (without the caps)
     |      @type density: float
     |      @type direction: int
     |      @type r: float
     |      @type h: float
     |  
     |  setCappedCylinderTotal(...)
     |      setCappedCylinderTotal(total_mass, direction, r, h)
     |      
     |      Set the mass parameters to represent a capped cylinder of the
     |      given parameters and mass, with the center of mass at
     |      (0,0,0) relative to the body. The radius of the cylinder (and
     |      the spherical cap) is r. The length of the cylinder (not
     |      counting the spherical cap) is h. The cylinder's long axis is
     |      oriented along the body's x, y or z axis according to the
     |      value of direction (1=x, 2=y, 3=z).
     |      
     |      @param total_mass: The total mass of the cylinder
     |      @param direction: The direction of the cylinder (1=x axis, 2=y axis, 3=z axis)
     |      @param r: The radius of the cylinder
     |      @param h: The length of the cylinder (without the caps)
     |      @type total_mass: float
     |      @type direction: int
     |      @type r: float
     |      @type h: float
     |  
     |  setCylinder(...)
     |      setCylinder(density, direction, r, h)
     |      
     |      Set the mass parameters to represent a flat-ended cylinder of
     |      the given parameters and density, with the center of mass at
     |      (0,0,0) relative to the body. The radius of the cylinder is r.
     |      The length of the cylinder is h. The cylinder's long axis is
     |      oriented along the body's x, y or z axis according to the value
     |      of direction (1=x, 2=y, 3=z).
     |      
     |      @param density: The density of the cylinder
     |      @param direction: The direction of the cylinder (1=x axis, 2=y axis, 3=z axis)
     |      @param r: The radius of the cylinder
     |      @param h: The length of the cylinder
     |      @type density: float
     |      @type direction: int
     |      @type r: float
     |      @type h: float
     |  
     |  setCylinderTotal(...)
     |      setCylinderTotal(total_mass, direction, r, h)
     |      
     |      Set the mass parameters to represent a flat-ended cylinder of
     |      the given parameters and mass, with the center of mass at
     |      (0,0,0) relative to the body. The radius of the cylinder is r.
     |      The length of the cylinder is h. The cylinder's long axis is
     |      oriented along the body's x, y or z axis according to the value
     |      of direction (1=x, 2=y, 3=z).
     |      
     |      @param total_mass: The total mass of the cylinder
     |      @param direction: The direction of the cylinder (1=x axis, 2=y axis, 3=z axis)
     |      @param r: The radius of the cylinder
     |      @param h: The length of the cylinder
     |      @type total_mass: float
     |      @type direction: int
     |      @type r: float
     |      @type h: float
     |  
     |  setParameters(...)
     |      setParameters(mass, cgx, cgy, cgz, I11, I22, I33, I12, I13, I23)
     |      
     |      Set the mass parameters to the given values.
     |      
     |      @param mass: Total mass of the body.
     |      @param cgx: Center of gravity position in the body frame (x component).
     |      @param cgy: Center of gravity position in the body frame (y component).
     |      @param cgz: Center of gravity position in the body frame (z component).
     |      @param I11: Inertia tensor
     |      @param I22: Inertia tensor
     |      @param I33: Inertia tensor
     |      @param I12: Inertia tensor
     |      @param I13: Inertia tensor
     |      @param I23: Inertia tensor
     |      @type mass: float
     |      @type cgx: float
     |      @type cgy: float
     |      @type cgz: float
     |      @type I11: float
     |      @type I22: float
     |      @type I33: float
     |      @type I12: float
     |      @type I13: float
     |      @type I23: float
     |  
     |  setSphere(...)
     |      setSphere(density, radius)
     |      
     |      Set the mass parameters to represent a sphere of the given radius
     |      and density, with the center of mass at (0,0,0) relative to the body.
     |      
     |      @param density: The density of the sphere
     |      @param radius: The radius of the sphere
     |      @type density: float
     |      @type radius: float
     |  
     |  setSphereTotal(...)
     |      setSphereTotal(total_mass, radius)
     |      
     |      Set the mass parameters to represent a sphere of the given radius
     |      and mass, with the center of mass at (0,0,0) relative to the body.
     |      
     |      @param total_mass: The total mass of the sphere
     |      @param radius: The radius of the sphere
     |      @type total_mass: float
     |      @type radius: float
     |  
     |  setZero(...)
     |      setZero()
     |      
     |      Set all the mass parameters to zero.
     |  
     |  translate(...)
     |      translate(t)
     |      
     |      Adjust mass parameters. Given mass parameters for some object,
     |      adjust them to represent the object displaced by (x,y,z)
     |      relative to the body frame.
     |      
     |      @param t: Translation vector (x, y, z)
     |      @type t: 3-tuple of floats
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class PRJoint(Joint)
     |  PR (Prismatic and Rotoide) joint.
     |  
     |  Constructor::
     |  
     |    PRJoint(world, jointgroup=None)
     |  
     |  http://opende.sourceforge.net/wiki/index.php/Manual_(Joint_Types_and_Functions)#Prismatic_and_Rotoide
     |  
     |  Method resolution order:
     |      PRJoint
     |      Joint
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  getAxis1(...)
     |      getAxis1() -> 3-tuple of floats
     |      
     |      Get the first PR axis (this is the prismatic axis).
     |  
     |  getAxis2(...)
     |      getAxis2() -> 3-tuple of floats
     |      
     |      Get the second PR axis (this is the rotoide axis).
     |  
     |  getPosition(...)
     |      getPosition() -> float
     |      
     |      Get the PR linear position (i.e. the prismatic's extension).
     |      
     |      When the axis is set, the current position of body1 and the anchor
     |      is examined and that position will be the zero position.
     |      
     |      The position is the "oriented" length between the body1 and and
     |      the rotoide articulation.
     |      
     |      position = (Prismatic axis) dot_product [(body1 + offset) - (body2 + anchor2)]
     |  
     |  setAxis1(...)
     |      setAxis1(axis)
     |      
     |      Set the first PR axis (this is the prismatic axis).
     |      
     |      @param axis: Prismatic axis
     |      @type axis: 3-sequence of floats
     |  
     |  setAxis2(...)
     |      setAxis2(axis)
     |      
     |      Set the second PR axis (this is the rotoide axis).
     |      
     |      Important: The two axes must not be parallel.
     |      Since this is a new joint only when the 2 joint are at 90deg
     |      of each other was fully tested.
     |      
     |      @param axis: Rotoide axis
     |      @type axis: 3-sequence of floats
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Joint:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  attach(...)
     |      attach(body1, body2)
     |      
     |      Attach the joint to some new bodies. A body can be attached
     |      to the environment by passing None as second body.
     |      
     |      @param body1: First body
     |      @param body2: Second body
     |      @type body1: Body
     |      @type body2: Body
     |  
     |  disable(...)
     |  
     |  enable(...)
     |  
     |  getBody(...)
     |      getBody(index) -> Body
     |      
     |      Return the bodies that this joint connects. If index is 0 the
     |      "first" body will be returned, corresponding to the body1
     |      argument of the attach() method. If index is 1 the "second" body
     |      will be returned, corresponding to the body2 argument of the
     |      attach() method.
     |      
     |      @param index: Bodx index (0 or 1).
     |      @type index: int
     |  
     |  getFeedback(...)
     |      getFeedback() -> (force1, torque1, force2, torque2)
     |      
     |      Get the forces/torques applied by the joint. If feedback is
     |      activated (i.e. setFeedback(True) was called) then this method
     |      returns a tuple (force1, torque1, force2, torque2) with the
     |      forces and torques applied to body 1 and body 2.  The
     |      forces/torques are given as 3-tuples.
     |      
     |      If feedback is deactivated then the method always returns None.
     |  
     |  getParam(...)
     |      getParam(param) -> float
     |      
     |      Get limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to read
     |      @type param: int
     |  
     |  isEnabled(...)
     |  
     |  setFeedback(...)
     |      setFeedback(flag=True)
     |      
     |      Create a feedback buffer. If flag is True then a buffer is
     |      allocated and the forces/torques applied by the joint can
     |      be read using the getFeedback() method. If flag is False the
     |      buffer is released.
     |      
     |      @param flag: Specifies whether a buffer should be created or released
     |      @type flag: bool
     |  
     |  setParam(...)
     |      setParam(param, value)
     |      
     |      Set limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to set
     |      @param value: Parameter value
     |      @type param: int
     |      @type value: float
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Joint:
     |  
     |  param
    
    class PUJoint(Joint)
     |  PU (Prismatic - Universal) joint.
     |  
     |  Constructor::
     |  
     |    PUJoint(world, jointgroup=None)
     |  
     |  http://opende.sourceforge.net/wiki/index.php/Manual_(Joint_Types_and_Functions)#Prismatic_-_Universal
     |  
     |  Method resolution order:
     |      PUJoint
     |      Joint
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  getAnchor(...)
     |      getAnchor() -> 3-tuple of floats
     |  
     |  getAngle1(...)
     |      getAngle1() -> float
     |      
     |      This is a wrapper for the following ODE function:
     |      
     |      dReal dJointGetPUAngle1 (dJointID);
     |  
     |  getAngle1Rate(...)
     |      getAngle1Rate() -> float
     |      
     |      This is a wrapper for the following ODE function:
     |      
     |      dReal dJointGetPUAngle1Rate (dJointID);
     |  
     |  getAngle2(...)
     |      getAngle2() -> float
     |      
     |      This is a wrapper for the following ODE function:
     |      
     |      dReal dJointGetPUAngle2 (dJointID);
     |  
     |  getAngle2Rate(...)
     |      getAngle2Rate() -> float
     |      
     |      This is a wrapper for the following ODE function:
     |      
     |      dReal dJointGetPUAngle2Rate (dJointID);
     |  
     |  getAngles(...)
     |      getAngles() -> void
     |      
     |      This is a wrapper for the following ODE function:
     |      
     |      void dJointGetPUAngles (dJointID, dReal *angle1, dReal *angle2);
     |  
     |  getAxis1(...)
     |      getAxis1() -> 3-tuple of floats
     |      
     |      Get the first PU axis.
     |  
     |  getAxis2(...)
     |      getAxis2() -> 3-tuple of floats
     |      
     |      Get the second PR axis (this is the rotoide axis).
     |  
     |  getAxis3(...)
     |      getAxis3() -> 3-tuple of floats
     |      
     |      Get the axis for the prismatic articulation.
     |  
     |  getAxisP(...)
     |  
     |  getPosition(...)
     |      getPosition() -> float
     |      
     |      Get the PU linear position (i.e. the prismatic's extension).
     |      
     |      When the anchor is set, the current position of body1 and the
     |      anchor is examined and that position will be the zero position
     |      (initial_offset) (i.e. dJointGetPUPosition with the body1
     |      at that position with respect to the anchor will return 0.0).
     |      
     |      The position is the "oriented" length between the body1 and
     |      and the universal articulation (anchor).
     |      
     |      position = { (Prismatic axis) dot_product [body1 - anchor] } - initial_offset
     |  
     |  getPositionRate(...)
     |      getPositionRate() -> float
     |      
     |      Get the time derivative of the position.
     |  
     |  setAnchor(...)
     |      setAnchor(pos)
     |      
     |      Set the PU anchor.
     |      
     |      @param pos: Anchor position
     |      @type pos: 3-sequence of floats
     |  
     |  setAnchorDelta(...)
     |      setAnchorDelta(pos, delta)
     |      
     |      Set the PU anchor and the relative position of each body,
     |      as if body1 was at its current position + [dx,dy,dy]
     |      (dx, dy, dx in world frame).
     |      
     |      [DZ is missing?!]
     |      
     |      This is like setting the joint with the prismatic part
     |      already elongated or compressed.
     |      
     |      After setting the anchor with a delta, if the function
     |      dJointGetPUPosition is called, the answer will be:
     |      
     |      sqrt(dx*dx + dy*dy + dz*dz) * Normalize[axis3 dot_product (dx,dy,dz)]
     |      
     |      
     |      @param pos: Anchor position
     |      @param delta: Anchor position
     |      @type pos: 3-sequence of floats
     |  
     |  setAxis1(...)
     |      setAxis1(axis)
     |      
     |      Set the first PU axis.
     |      
     |      @param axis: Axis 1
     |      @type axis: 3-sequence of floats
     |  
     |  setAxis2(...)
     |      setAxis2(axis)
     |      
     |      Set the second PU axis.
     |      
     |      Axis 1 and axis 2 should be perpendicular to each other.
     |      
     |      @param axis: Axis 2
     |      @type axis: 3-sequence of floats
     |  
     |  setAxis3(...)
     |      setAxis3(axis)
     |      
     |      Set the axis for the prismatic articulation.
     |      
     |      @param axis: Axis 3
     |      @type axis: 3-sequence of floats
     |  
     |  setAxisP(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Joint:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  attach(...)
     |      attach(body1, body2)
     |      
     |      Attach the joint to some new bodies. A body can be attached
     |      to the environment by passing None as second body.
     |      
     |      @param body1: First body
     |      @param body2: Second body
     |      @type body1: Body
     |      @type body2: Body
     |  
     |  disable(...)
     |  
     |  enable(...)
     |  
     |  getBody(...)
     |      getBody(index) -> Body
     |      
     |      Return the bodies that this joint connects. If index is 0 the
     |      "first" body will be returned, corresponding to the body1
     |      argument of the attach() method. If index is 1 the "second" body
     |      will be returned, corresponding to the body2 argument of the
     |      attach() method.
     |      
     |      @param index: Bodx index (0 or 1).
     |      @type index: int
     |  
     |  getFeedback(...)
     |      getFeedback() -> (force1, torque1, force2, torque2)
     |      
     |      Get the forces/torques applied by the joint. If feedback is
     |      activated (i.e. setFeedback(True) was called) then this method
     |      returns a tuple (force1, torque1, force2, torque2) with the
     |      forces and torques applied to body 1 and body 2.  The
     |      forces/torques are given as 3-tuples.
     |      
     |      If feedback is deactivated then the method always returns None.
     |  
     |  getParam(...)
     |      getParam(param) -> float
     |      
     |      Get limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to read
     |      @type param: int
     |  
     |  isEnabled(...)
     |  
     |  setFeedback(...)
     |      setFeedback(flag=True)
     |      
     |      Create a feedback buffer. If flag is True then a buffer is
     |      allocated and the forces/torques applied by the joint can
     |      be read using the getFeedback() method. If flag is False the
     |      buffer is released.
     |      
     |      @param flag: Specifies whether a buffer should be created or released
     |      @type flag: bool
     |  
     |  setParam(...)
     |      setParam(param, value)
     |      
     |      Set limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to set
     |      @param value: Parameter value
     |      @type param: int
     |      @type value: float
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Joint:
     |  
     |  param
    
    class PistonJoint(Joint)
     |  Piston joint.
     |  
     |  Constructor::
     |  
     |    PistonJoint(world, jointgroup=None)
     |  
     |  A piston joint is similar to a Slider joint, except that
     |  rotation around the translation axis is possible.
     |  
     |  The default axis is: Axis: x=1, y=0, z=0
     |  
     |  http://opende.sourceforge.net/wiki/index.php/Manual_(Joint_Types_and_Functions)#Piston
     |  
     |  Method resolution order:
     |      PistonJoint
     |      Joint
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addForce(...)
     |      addForce(force)
     |      
     |      Applies the given force in the piston's direction.
     |      
     |      @param force: Force magnitude
     |      @type force: float
     |  
     |  getAnchor(...)
     |      getAnchor() -> 3-tuple of floats
     |  
     |  getAnchor2(...)
     |      getAnchor2() -> 3-tuple of floats
     |      
     |      Get the joint anchor point, in world coordinates.
     |      
     |      This returns the point on body 2. If the joint is perfectly satisfied,
     |      this will return the same value as dJointGetPistonAnchor.
     |      If not, this value will be slightly different.
     |      
     |      This can be used, for example, to see how far the joint has come apart.
     |  
     |  getAngle(...)
     |      getAngle() -> float
     |      
     |      This is a wrapper for the following ODE function:
     |      
     |      dReal dJointGetPistonAngle (dJointID);
     |  
     |  getAngleRate(...)
     |      getPistonAngleRate() -> float
     |      
     |      This is a wrapper for the following ODE function:
     |      
     |      dReal dJointGetPistonAngleRate (dJointID);
     |  
     |  getAxis(...)
     |      getAxis() -> 3-tuple of floats
     |      
     |      Get the piston axis.
     |  
     |  getPosition(...)
     |      getPosition() -> float
     |      
     |      Get the Piston linear position (i.e. the prismatic's extension)
     |      
     |      [The explanation from ODE wiki is copied from PU joint,
     |       and might not be 100% accurate]
     |      
     |      When the anchor is set, the current position of body1 and the anchor
     |      is examined and that position will be the zero position (initial_offset)
     |      (i.e. dJointGetPUPosition with the body1 at that position with respect
     |      to the anchor will return 0.0).
     |      
     |      The position is the "oriented" length between the body1 and and the anchor.
     |      
     |      position = { (Prismatic axis) dot_product [body1 - anchor] } - initial_offset
     |  
     |  getPositionRate(...)
     |      getPositionRate() -> float
     |      
     |      Get the time derivative of the position.
     |  
     |  setAnchor(...)
     |      setAnchor(pos)
     |      
     |      Set the Piston anchor.
     |      
     |      @param pos: Anchor position
     |      @type pos: 3-sequence of floats
     |  
     |  setAxis(...)
     |      setAxis(axis)
     |      
     |      Set the piston axis.
     |      
     |      When the piston axis is set, the current position of the attached
     |      bodies is examined and that position will be the zero angle.
     |      
     |      @param axis: Piston axis
     |      @type axis: 3-sequence of floats
     |  
     |  setAxisDelta(...)
     |      setAxisDelta(axis)
     |      
     |      Does some black magic (not documented in the ODE wiki)
     |      
     |      @param axis: Piston axis
     |      @param delta: Piston delta
     |      @type axis: 3-sequence of floats
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Joint:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  attach(...)
     |      attach(body1, body2)
     |      
     |      Attach the joint to some new bodies. A body can be attached
     |      to the environment by passing None as second body.
     |      
     |      @param body1: First body
     |      @param body2: Second body
     |      @type body1: Body
     |      @type body2: Body
     |  
     |  disable(...)
     |  
     |  enable(...)
     |  
     |  getBody(...)
     |      getBody(index) -> Body
     |      
     |      Return the bodies that this joint connects. If index is 0 the
     |      "first" body will be returned, corresponding to the body1
     |      argument of the attach() method. If index is 1 the "second" body
     |      will be returned, corresponding to the body2 argument of the
     |      attach() method.
     |      
     |      @param index: Bodx index (0 or 1).
     |      @type index: int
     |  
     |  getFeedback(...)
     |      getFeedback() -> (force1, torque1, force2, torque2)
     |      
     |      Get the forces/torques applied by the joint. If feedback is
     |      activated (i.e. setFeedback(True) was called) then this method
     |      returns a tuple (force1, torque1, force2, torque2) with the
     |      forces and torques applied to body 1 and body 2.  The
     |      forces/torques are given as 3-tuples.
     |      
     |      If feedback is deactivated then the method always returns None.
     |  
     |  getParam(...)
     |      getParam(param) -> float
     |      
     |      Get limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to read
     |      @type param: int
     |  
     |  isEnabled(...)
     |  
     |  setFeedback(...)
     |      setFeedback(flag=True)
     |      
     |      Create a feedback buffer. If flag is True then a buffer is
     |      allocated and the forces/torques applied by the joint can
     |      be read using the getFeedback() method. If flag is False the
     |      buffer is released.
     |      
     |      @param flag: Specifies whether a buffer should be created or released
     |      @type flag: bool
     |  
     |  setParam(...)
     |      setParam(param, value)
     |      
     |      Set limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to set
     |      @param value: Parameter value
     |      @type param: int
     |      @type value: float
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Joint:
     |  
     |  param
    
    class Plane2DJoint(Joint)
     |  Plane-2D Joint.
     |  
     |  Constructor::
     |  
     |    Plane2DJoint(world, jointgroup=None)
     |  
     |  Method resolution order:
     |      Plane2DJoint
     |      Joint
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  dontGetParam(...)
     |  
     |  setAngleParam(...)
     |  
     |  setXParam(...)
     |  
     |  setYParam(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  paramAngle
     |  
     |  paramX
     |  
     |  paramY
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Joint:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  attach(...)
     |      attach(body1, body2)
     |      
     |      Attach the joint to some new bodies. A body can be attached
     |      to the environment by passing None as second body.
     |      
     |      @param body1: First body
     |      @param body2: Second body
     |      @type body1: Body
     |      @type body2: Body
     |  
     |  disable(...)
     |  
     |  enable(...)
     |  
     |  getBody(...)
     |      getBody(index) -> Body
     |      
     |      Return the bodies that this joint connects. If index is 0 the
     |      "first" body will be returned, corresponding to the body1
     |      argument of the attach() method. If index is 1 the "second" body
     |      will be returned, corresponding to the body2 argument of the
     |      attach() method.
     |      
     |      @param index: Bodx index (0 or 1).
     |      @type index: int
     |  
     |  getFeedback(...)
     |      getFeedback() -> (force1, torque1, force2, torque2)
     |      
     |      Get the forces/torques applied by the joint. If feedback is
     |      activated (i.e. setFeedback(True) was called) then this method
     |      returns a tuple (force1, torque1, force2, torque2) with the
     |      forces and torques applied to body 1 and body 2.  The
     |      forces/torques are given as 3-tuples.
     |      
     |      If feedback is deactivated then the method always returns None.
     |  
     |  getParam(...)
     |      getParam(param) -> float
     |      
     |      Get limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to read
     |      @type param: int
     |  
     |  isEnabled(...)
     |  
     |  setFeedback(...)
     |      setFeedback(flag=True)
     |      
     |      Create a feedback buffer. If flag is True then a buffer is
     |      allocated and the forces/torques applied by the joint can
     |      be read using the getFeedback() method. If flag is False the
     |      buffer is released.
     |      
     |      @param flag: Specifies whether a buffer should be created or released
     |      @type flag: bool
     |  
     |  setParam(...)
     |      setParam(param, value)
     |      
     |      Set limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to set
     |      @param value: Parameter value
     |      @type param: int
     |      @type value: float
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Joint:
     |  
     |  param
    
    class QuadTreeSpace(SpaceBase)
     |  Quadtree space.
     |  
     |  This uses a pre-allocated hierarchical grid-based AABB tree to
     |  quickly cull collision checks. It's exceptionally quick for large
     |  amounts of objects in landscape-shaped worlds. The amount of
     |  memory used is 4**depth * 32 bytes.
     |  
     |  Currently getGeom() is not implemented for the quadtree space.
     |  
     |  Method resolution order:
     |      QuadTreeSpace
     |      SpaceBase
     |      GeomObject
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SpaceBase:
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  add(...)
     |      add(geom)
     |      
     |      Add a geom to a space. This does nothing if the geom is
     |      already in the space.
     |      
     |      @param geom: Geom object to add
     |      @type geom: GeomObject
     |  
     |  collide(...)
     |      collide(arg, callback)
     |      
     |      Call a callback function one or more times, for all
     |      potentially intersecting objects in the space. The callback
     |      function takes 3 arguments:
     |      
     |      def NearCallback(arg, geom1, geom2):
     |      
     |      The arg parameter is just passed on to the callback function.
     |      Its meaning is user defined. The geom1 and geom2 arguments are
     |      the geometry objects that may be near each other. The callback
     |      function can call the function collide() (not the Space
     |      method) on geom1 and geom2, perhaps first determining
     |      whether to collide them at all based on other information.
     |      
     |      @param arg: A user argument that is passed to the callback function
     |      @param callback: Callback function
     |      @type callback: callable
     |  
     |  getGeom(...)
     |      getGeom(idx) -> GeomObject
     |      
     |      Return the geom with the given index contained within the space.
     |      
     |      @param idx: Geom index (0,1,...,getNumGeoms()-1)
     |      @type idx: int
     |  
     |  getNumGeoms(...)
     |      getNumGeoms() -> int
     |      
     |      Return the number of geoms contained within the space.
     |  
     |  query(...)
     |      query(geom) -> bool
     |      
     |      Return True if the given geom is in the space.
     |      
     |      @param geom: Geom object to check
     |      @type geom: GeomObject
     |  
     |  remove(...)
     |      remove(geom)
     |      
     |      Remove a geom from a space.
     |      
     |      @param geom: Geom object to remove
     |      @type geom: GeomObject
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from GeomObject:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  disable(...)
     |      disable()
     |      
     |      Disable the geom.
     |  
     |  enable(...)
     |      enable()
     |      
     |      Enable the geom.
     |  
     |  getAABB(...)
     |      getAABB() -> 6-tuple
     |      
     |      Return an axis aligned bounding box that surrounds the geom.
     |      The return value is a 6-tuple (minx, maxx, miny, maxy, minz, maxz).
     |  
     |  getBody(...)
     |      getBody() -> Body
     |      
     |      Get the body associated with this geom.
     |  
     |  getCategoryBits(...)
     |      getCategoryBits() -> long
     |      
     |      Return the "category" bitfields for this geom.
     |  
     |  getCollideBits(...)
     |      getCollideBits() -> long
     |      
     |      Return the "collide" bitfields for this geom.
     |  
     |  getPosition(...)
     |      getPosition() -> 3-tuple
     |      
     |      Get the current position of the geom. If the geom is attached to
     |      a body the returned value is the body's position.
     |  
     |  getQuaternion(...)
     |      getQuaternion() -> (w,x,y,z)
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getRotation(...)
     |      getRotation() -> 9-tuple
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getSpace(...)
     |      getSpace() -> Space
     |      
     |      Return the space that the given geometry is contained in,
     |      or return None if it is not contained in any space.
     |  
     |  isEnabled(...)
     |      isEnabled() -> bool
     |      
     |      Return True if the geom is enabled.
     |  
     |  isSpace(...)
     |      isSpace() -> bool
     |      
     |      Return 1 if the given geom is a space, or 0 if not.
     |  
     |  placeable(...)
     |      placeable() -> bool
     |      
     |      Returns True if the geom object is a placeable geom.
     |      
     |      This method has to be overwritten in derived methods.
     |  
     |  setBody(...)
     |      setBody(body)
     |      
     |      Set the body associated with a placeable geom.
     |      
     |      @param body: The Body object or None.
     |      @type body: Body
     |  
     |  setCategoryBits(...)
     |      setCategoryBits(bits)
     |      
     |      Set the "category" bitfields for this geom.
     |      
     |      @param bits: Category bit field
     |      @type bits: int/long
     |  
     |  setCollideBits(...)
     |      setCollideBits(bits)
     |      
     |      Set the "collide" bitfields for this geom.
     |      
     |      @param bits: Collide bit field
     |      @type bits: int/long
     |  
     |  setPosition(...)
     |      setPosition(pos)
     |      
     |      Set the position of the geom. If the geom is attached to a body,
     |      the body's position will also be changed.
     |      
     |      @param pos: Position
     |      @type pos: 3-sequence of floats
     |  
     |  setQuaternion(...)
     |      setQuaternion(q)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param q: Quaternion (w,x,y,z)
     |      @type q: 4-sequence of floats
     |  
     |  setRotation(...)
     |      setRotation(R)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param R: Rotation matrix
     |      @type R: 9-sequence of floats
    
    class SimpleSpace(SpaceBase)
     |  Simple space.
     |  
     |  This does not do any collision culling - it simply checks every
     |  possible pair of geoms for intersection, and reports the pairs
     |  whose AABBs overlap. The time required to do intersection testing
     |  for n objects is O(n**2). This should not be used for large numbers
     |  of objects, but it can be the preferred algorithm for a small
     |  number of objects. This is also useful for debugging potential
     |  problems with the collision system.
     |  
     |  Method resolution order:
     |      SimpleSpace
     |      SpaceBase
     |      GeomObject
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SpaceBase:
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  add(...)
     |      add(geom)
     |      
     |      Add a geom to a space. This does nothing if the geom is
     |      already in the space.
     |      
     |      @param geom: Geom object to add
     |      @type geom: GeomObject
     |  
     |  collide(...)
     |      collide(arg, callback)
     |      
     |      Call a callback function one or more times, for all
     |      potentially intersecting objects in the space. The callback
     |      function takes 3 arguments:
     |      
     |      def NearCallback(arg, geom1, geom2):
     |      
     |      The arg parameter is just passed on to the callback function.
     |      Its meaning is user defined. The geom1 and geom2 arguments are
     |      the geometry objects that may be near each other. The callback
     |      function can call the function collide() (not the Space
     |      method) on geom1 and geom2, perhaps first determining
     |      whether to collide them at all based on other information.
     |      
     |      @param arg: A user argument that is passed to the callback function
     |      @param callback: Callback function
     |      @type callback: callable
     |  
     |  getGeom(...)
     |      getGeom(idx) -> GeomObject
     |      
     |      Return the geom with the given index contained within the space.
     |      
     |      @param idx: Geom index (0,1,...,getNumGeoms()-1)
     |      @type idx: int
     |  
     |  getNumGeoms(...)
     |      getNumGeoms() -> int
     |      
     |      Return the number of geoms contained within the space.
     |  
     |  query(...)
     |      query(geom) -> bool
     |      
     |      Return True if the given geom is in the space.
     |      
     |      @param geom: Geom object to check
     |      @type geom: GeomObject
     |  
     |  remove(...)
     |      remove(geom)
     |      
     |      Remove a geom from a space.
     |      
     |      @param geom: Geom object to remove
     |      @type geom: GeomObject
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from GeomObject:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  disable(...)
     |      disable()
     |      
     |      Disable the geom.
     |  
     |  enable(...)
     |      enable()
     |      
     |      Enable the geom.
     |  
     |  getAABB(...)
     |      getAABB() -> 6-tuple
     |      
     |      Return an axis aligned bounding box that surrounds the geom.
     |      The return value is a 6-tuple (minx, maxx, miny, maxy, minz, maxz).
     |  
     |  getBody(...)
     |      getBody() -> Body
     |      
     |      Get the body associated with this geom.
     |  
     |  getCategoryBits(...)
     |      getCategoryBits() -> long
     |      
     |      Return the "category" bitfields for this geom.
     |  
     |  getCollideBits(...)
     |      getCollideBits() -> long
     |      
     |      Return the "collide" bitfields for this geom.
     |  
     |  getPosition(...)
     |      getPosition() -> 3-tuple
     |      
     |      Get the current position of the geom. If the geom is attached to
     |      a body the returned value is the body's position.
     |  
     |  getQuaternion(...)
     |      getQuaternion() -> (w,x,y,z)
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getRotation(...)
     |      getRotation() -> 9-tuple
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getSpace(...)
     |      getSpace() -> Space
     |      
     |      Return the space that the given geometry is contained in,
     |      or return None if it is not contained in any space.
     |  
     |  isEnabled(...)
     |      isEnabled() -> bool
     |      
     |      Return True if the geom is enabled.
     |  
     |  isSpace(...)
     |      isSpace() -> bool
     |      
     |      Return 1 if the given geom is a space, or 0 if not.
     |  
     |  placeable(...)
     |      placeable() -> bool
     |      
     |      Returns True if the geom object is a placeable geom.
     |      
     |      This method has to be overwritten in derived methods.
     |  
     |  setBody(...)
     |      setBody(body)
     |      
     |      Set the body associated with a placeable geom.
     |      
     |      @param body: The Body object or None.
     |      @type body: Body
     |  
     |  setCategoryBits(...)
     |      setCategoryBits(bits)
     |      
     |      Set the "category" bitfields for this geom.
     |      
     |      @param bits: Category bit field
     |      @type bits: int/long
     |  
     |  setCollideBits(...)
     |      setCollideBits(bits)
     |      
     |      Set the "collide" bitfields for this geom.
     |      
     |      @param bits: Collide bit field
     |      @type bits: int/long
     |  
     |  setPosition(...)
     |      setPosition(pos)
     |      
     |      Set the position of the geom. If the geom is attached to a body,
     |      the body's position will also be changed.
     |      
     |      @param pos: Position
     |      @type pos: 3-sequence of floats
     |  
     |  setQuaternion(...)
     |      setQuaternion(q)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param q: Quaternion (w,x,y,z)
     |      @type q: 4-sequence of floats
     |  
     |  setRotation(...)
     |      setRotation(R)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param R: Rotation matrix
     |      @type R: 9-sequence of floats
    
    class SliderJoint(Joint)
     |  Slider joint.
     |  
     |  Constructor::
     |  
     |    SlideJoint(world, jointgroup=None)
     |  
     |  Method resolution order:
     |      SliderJoint
     |      Joint
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addForce(...)
     |      addForce(force)
     |      
     |      Applies the given force in the slider's direction.
     |      
     |      @param force: Force magnitude
     |      @type force: float
     |  
     |  getAxis(...)
     |      getAxis() -> 3-tuple of floats
     |      
     |      Get the slider axis parameter.
     |  
     |  getPosition(...)
     |      getPosition() -> float
     |      
     |      Get the slider linear position (i.e. the slider's "extension").
     |      
     |      When the axis is set, the current position of the attached
     |      bodies is examined and that position will be the zero
     |      position.
     |  
     |  getPositionRate(...)
     |      getPositionRate() -> float
     |      
     |      Get the time derivative of the position.
     |  
     |  setAxis(...)
     |      setAxis(axis)
     |      
     |      Set the slider axis parameter.
     |      
     |      @param axis: Slider axis
     |      @type axis: 3-sequence of floats
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Joint:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  attach(...)
     |      attach(body1, body2)
     |      
     |      Attach the joint to some new bodies. A body can be attached
     |      to the environment by passing None as second body.
     |      
     |      @param body1: First body
     |      @param body2: Second body
     |      @type body1: Body
     |      @type body2: Body
     |  
     |  disable(...)
     |  
     |  enable(...)
     |  
     |  getBody(...)
     |      getBody(index) -> Body
     |      
     |      Return the bodies that this joint connects. If index is 0 the
     |      "first" body will be returned, corresponding to the body1
     |      argument of the attach() method. If index is 1 the "second" body
     |      will be returned, corresponding to the body2 argument of the
     |      attach() method.
     |      
     |      @param index: Bodx index (0 or 1).
     |      @type index: int
     |  
     |  getFeedback(...)
     |      getFeedback() -> (force1, torque1, force2, torque2)
     |      
     |      Get the forces/torques applied by the joint. If feedback is
     |      activated (i.e. setFeedback(True) was called) then this method
     |      returns a tuple (force1, torque1, force2, torque2) with the
     |      forces and torques applied to body 1 and body 2.  The
     |      forces/torques are given as 3-tuples.
     |      
     |      If feedback is deactivated then the method always returns None.
     |  
     |  getParam(...)
     |      getParam(param) -> float
     |      
     |      Get limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to read
     |      @type param: int
     |  
     |  isEnabled(...)
     |  
     |  setFeedback(...)
     |      setFeedback(flag=True)
     |      
     |      Create a feedback buffer. If flag is True then a buffer is
     |      allocated and the forces/torques applied by the joint can
     |      be read using the getFeedback() method. If flag is False the
     |      buffer is released.
     |      
     |      @param flag: Specifies whether a buffer should be created or released
     |      @type flag: bool
     |  
     |  setParam(...)
     |      setParam(param, value)
     |      
     |      Set limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to set
     |      @param value: Parameter value
     |      @type param: int
     |      @type value: float
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Joint:
     |  
     |  param
    
    class SpaceBase(GeomObject)
     |  Space class (container for geometry objects).
     |  
     |  A Space object is a container for geometry objects which are used
     |  to do collision detection.
     |  The space does high level collision culling, which means that it
     |  can identify which pairs of geometry objects are potentially
     |  touching.
     |  
     |  This Space class can be used for both, a SimpleSpace and a HashSpace
     |  (see ODE documentation).
     |  
     |   >>> space = Space(type=0)   # Create a SimpleSpace
     |   >>> space = Space(type=1)   # Create a HashSpace
     |  
     |  Method resolution order:
     |      SpaceBase
     |      GeomObject
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __iter__(...)
     |      x.__iter__() <==> iter(x)
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  add(...)
     |      add(geom)
     |      
     |      Add a geom to a space. This does nothing if the geom is
     |      already in the space.
     |      
     |      @param geom: Geom object to add
     |      @type geom: GeomObject
     |  
     |  collide(...)
     |      collide(arg, callback)
     |      
     |      Call a callback function one or more times, for all
     |      potentially intersecting objects in the space. The callback
     |      function takes 3 arguments:
     |      
     |      def NearCallback(arg, geom1, geom2):
     |      
     |      The arg parameter is just passed on to the callback function.
     |      Its meaning is user defined. The geom1 and geom2 arguments are
     |      the geometry objects that may be near each other. The callback
     |      function can call the function collide() (not the Space
     |      method) on geom1 and geom2, perhaps first determining
     |      whether to collide them at all based on other information.
     |      
     |      @param arg: A user argument that is passed to the callback function
     |      @param callback: Callback function
     |      @type callback: callable
     |  
     |  getGeom(...)
     |      getGeom(idx) -> GeomObject
     |      
     |      Return the geom with the given index contained within the space.
     |      
     |      @param idx: Geom index (0,1,...,getNumGeoms()-1)
     |      @type idx: int
     |  
     |  getNumGeoms(...)
     |      getNumGeoms() -> int
     |      
     |      Return the number of geoms contained within the space.
     |  
     |  query(...)
     |      query(geom) -> bool
     |      
     |      Return True if the given geom is in the space.
     |      
     |      @param geom: Geom object to check
     |      @type geom: GeomObject
     |  
     |  remove(...)
     |      remove(geom)
     |      
     |      Remove a geom from a space.
     |      
     |      @param geom: Geom object to remove
     |      @type geom: GeomObject
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from GeomObject:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  disable(...)
     |      disable()
     |      
     |      Disable the geom.
     |  
     |  enable(...)
     |      enable()
     |      
     |      Enable the geom.
     |  
     |  getAABB(...)
     |      getAABB() -> 6-tuple
     |      
     |      Return an axis aligned bounding box that surrounds the geom.
     |      The return value is a 6-tuple (minx, maxx, miny, maxy, minz, maxz).
     |  
     |  getBody(...)
     |      getBody() -> Body
     |      
     |      Get the body associated with this geom.
     |  
     |  getCategoryBits(...)
     |      getCategoryBits() -> long
     |      
     |      Return the "category" bitfields for this geom.
     |  
     |  getCollideBits(...)
     |      getCollideBits() -> long
     |      
     |      Return the "collide" bitfields for this geom.
     |  
     |  getPosition(...)
     |      getPosition() -> 3-tuple
     |      
     |      Get the current position of the geom. If the geom is attached to
     |      a body the returned value is the body's position.
     |  
     |  getQuaternion(...)
     |      getQuaternion() -> (w,x,y,z)
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getRotation(...)
     |      getRotation() -> 9-tuple
     |      
     |      Get the current orientation of the geom. If the geom is attached to
     |      a body the returned value is the body's orientation.
     |  
     |  getSpace(...)
     |      getSpace() -> Space
     |      
     |      Return the space that the given geometry is contained in,
     |      or return None if it is not contained in any space.
     |  
     |  isEnabled(...)
     |      isEnabled() -> bool
     |      
     |      Return True if the geom is enabled.
     |  
     |  isSpace(...)
     |      isSpace() -> bool
     |      
     |      Return 1 if the given geom is a space, or 0 if not.
     |  
     |  placeable(...)
     |      placeable() -> bool
     |      
     |      Returns True if the geom object is a placeable geom.
     |      
     |      This method has to be overwritten in derived methods.
     |  
     |  setBody(...)
     |      setBody(body)
     |      
     |      Set the body associated with a placeable geom.
     |      
     |      @param body: The Body object or None.
     |      @type body: Body
     |  
     |  setCategoryBits(...)
     |      setCategoryBits(bits)
     |      
     |      Set the "category" bitfields for this geom.
     |      
     |      @param bits: Category bit field
     |      @type bits: int/long
     |  
     |  setCollideBits(...)
     |      setCollideBits(bits)
     |      
     |      Set the "collide" bitfields for this geom.
     |      
     |      @param bits: Collide bit field
     |      @type bits: int/long
     |  
     |  setPosition(...)
     |      setPosition(pos)
     |      
     |      Set the position of the geom. If the geom is attached to a body,
     |      the body's position will also be changed.
     |      
     |      @param pos: Position
     |      @type pos: 3-sequence of floats
     |  
     |  setQuaternion(...)
     |      setQuaternion(q)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param q: Quaternion (w,x,y,z)
     |      @type q: 4-sequence of floats
     |  
     |  setRotation(...)
     |      setRotation(R)
     |      
     |      Set the orientation of the geom. If the geom is attached to a body,
     |      the body's orientation will also be changed.
     |      
     |      @param R: Rotation matrix
     |      @type R: 9-sequence of floats
    
    class TriMeshData(__builtin__.object)
     |  This class stores the mesh data.
     |  
     |  Methods defined here:
     |  
     |  build(...)
     |      build(verts, faces)
     |      
     |      @param verts: Vertices
     |      @type verts: Sequence of 3-sequences of floats
     |      @param faces: Face definitions (three indices per face)
     |      @type faces: Sequence of 3-sequences of ints
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class UniversalJoint(Joint)
     |  Universal joint.
     |  
     |  Constructor::
     |  
     |    UniversalJoint(world, jointgroup=None)
     |  
     |  Method resolution order:
     |      UniversalJoint
     |      Joint
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addTorques(...)
     |      addTorques(torque1, torque2)
     |      
     |      Applies torque1 about axis 1, and torque2 about axis 2.
     |      
     |      @param torque1: Torque 1 magnitude
     |      @param torque2: Torque 2 magnitude
     |      @type torque1: float
     |      @type torque2: float
     |  
     |  getAnchor(...)
     |      getAnchor() -> 3-tuple of floats
     |      
     |      Get the joint anchor point, in world coordinates. This returns
     |      the point on body 1. If the joint is perfectly satisfied, this
     |      will be the same as the point on body 2.
     |  
     |  getAnchor2(...)
     |      getAnchor2() -> 3-tuple of floats
     |      
     |      Get the joint anchor point, in world coordinates. This returns
     |      the point on body 2. If the joint is perfectly satisfied, this
     |      will be the same as the point on body 1.
     |  
     |  getAngle1(...)
     |  
     |  getAngle1Rate(...)
     |  
     |  getAngle2(...)
     |  
     |  getAngle2Rate(...)
     |  
     |  getAxis1(...)
     |      getAxis1() -> 3-tuple of floats
     |      
     |      Get the first univeral axis.
     |  
     |  getAxis2(...)
     |      getAxis2() -> 3-tuple of floats
     |      
     |      Get the second univeral axis.
     |  
     |  setAnchor(...)
     |      setAnchor(pos)
     |      
     |      Set the universal anchor.
     |      
     |      @param pos: Anchor position
     |      @type pos: 3-sequence of floats
     |  
     |  setAxis1(...)
     |      setAxis1(axis)
     |      
     |      Set the first universal axis. Axis 1 and axis 2 should be
     |      perpendicular to each other.
     |      
     |      @param axis: Joint axis
     |      @type axis: 3-sequence of floats
     |  
     |  setAxis2(...)
     |      setAxis2(axis)
     |      
     |      Set the second universal axis. Axis 1 and axis 2 should be
     |      perpendicular to each other.
     |      
     |      @param axis: Joint axis
     |      @type axis: 3-sequence of floats
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Joint:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  attach(...)
     |      attach(body1, body2)
     |      
     |      Attach the joint to some new bodies. A body can be attached
     |      to the environment by passing None as second body.
     |      
     |      @param body1: First body
     |      @param body2: Second body
     |      @type body1: Body
     |      @type body2: Body
     |  
     |  disable(...)
     |  
     |  enable(...)
     |  
     |  getBody(...)
     |      getBody(index) -> Body
     |      
     |      Return the bodies that this joint connects. If index is 0 the
     |      "first" body will be returned, corresponding to the body1
     |      argument of the attach() method. If index is 1 the "second" body
     |      will be returned, corresponding to the body2 argument of the
     |      attach() method.
     |      
     |      @param index: Bodx index (0 or 1).
     |      @type index: int
     |  
     |  getFeedback(...)
     |      getFeedback() -> (force1, torque1, force2, torque2)
     |      
     |      Get the forces/torques applied by the joint. If feedback is
     |      activated (i.e. setFeedback(True) was called) then this method
     |      returns a tuple (force1, torque1, force2, torque2) with the
     |      forces and torques applied to body 1 and body 2.  The
     |      forces/torques are given as 3-tuples.
     |      
     |      If feedback is deactivated then the method always returns None.
     |  
     |  getParam(...)
     |      getParam(param) -> float
     |      
     |      Get limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to read
     |      @type param: int
     |  
     |  isEnabled(...)
     |  
     |  setFeedback(...)
     |      setFeedback(flag=True)
     |      
     |      Create a feedback buffer. If flag is True then a buffer is
     |      allocated and the forces/torques applied by the joint can
     |      be read using the getFeedback() method. If flag is False the
     |      buffer is released.
     |      
     |      @param flag: Specifies whether a buffer should be created or released
     |      @type flag: bool
     |  
     |  setParam(...)
     |      setParam(param, value)
     |      
     |      Set limit/motor parameters for the joint.
     |      
     |      param is one of ParamLoStop, ParamHiStop, ParamVel, ParamFMax,
     |      ParamFudgeFactor, ParamBounce, ParamCFM, ParamStopERP, ParamStopCFM,
     |      ParamSuspensionERP, ParamSuspensionCFM.
     |      
     |      These parameter names can be optionally followed by a digit (2
     |      or 3) to indicate the second or third set of parameters.
     |      
     |      @param param: Selects the parameter to set
     |      @param value: Parameter value
     |      @type param: int
     |      @type value: float
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Joint:
     |  
     |  param
    
    class World(__builtin__.object)
     |  Dynamics world.
     |  
     |  The world object is a container for rigid bodies and joints.
     |  
     |  
     |  Constructor::
     |  
     |    World()
     |  
     |  Methods defined here:
     |  
     |  getAngularDamping(...)
     |      getAngularDamping() -> float
     |      
     |      Get the world's angular damping scale.
     |  
     |  getAutoDisableAngularThreshold(...)
     |      getAutoDisableAngularThreshold() -> float
     |      
     |      Get the default auto-disable angular threshold for newly created
     |      bodies.
     |  
     |  getAutoDisableFlag(...)
     |      getAutoDisableFlag() -> bool
     |      
     |      Get the default auto-disable flag for newly created bodies.
     |  
     |  getAutoDisableLinearThreshold(...)
     |      getAutoDisableLinearThreshold() -> float
     |      
     |      Get the default auto-disable linear threshold for newly created
     |      bodies.
     |  
     |  getAutoDisableSteps(...)
     |      getAutoDisableSteps() -> int
     |      
     |      Get the default auto-disable steps for newly created bodies.
     |  
     |  getAutoDisableTime(...)
     |      getAutoDisableTime() -> float
     |      
     |      Get the default auto-disable time for newly created bodies.
     |  
     |  getCFM(...)
     |      getCFM() -> float
     |      
     |      Get the global CFM (constraint force mixing) value. Typical
     |      values are in the range 10E-9 - 1. The default is 10E-5 if
     |      single precision is being used, or 10E-10 if double precision
     |      is being used.
     |  
     |  getContactMaxCorrectingVel(...)
     |      getContactMaxCorrectingVel() -> float
     |      
     |      Get the maximum correcting velocity that contacts are allowed
     |      to generate. The default value is infinity (i.e. no
     |      limit). Reducing this value can help prevent "popping" of
     |      deeply embedded objects.
     |  
     |  getContactSurfaceLayer(...)
     |      getContactSurfaceLayer()
     |      
     |      Get the depth of the surface layer around all geometry
     |      objects. Contacts are allowed to sink into the surface layer
     |      up to the given depth before coming to rest. The default value
     |      is zero. Increasing this to some small value (e.g. 0.001) can
     |      help prevent jittering problems due to contacts being
     |      repeatedly made and broken.
     |  
     |  getERP(...)
     |      getERP() -> float
     |      
     |      Get the global ERP value, that controls how much error
     |      correction is performed in each time step. Typical values are
     |      in the range 0.1-0.8. The default is 0.2.
     |  
     |  getGravity(...)
     |      getGravity() -> 3-tuple
     |      
     |      Return the world's global gravity vector as a 3-tuple of floats.
     |  
     |  getLinearDamping(...)
     |      getLinearDamping() -> float
     |      
     |      Get the world's linear damping scale.
     |  
     |  getQuickStepNumIterations(...)
     |      getQuickStepNumIterations() -> int
     |      
     |      Get the number of iterations that the QuickStep method
     |      performs per step. More iterations will give a more accurate
     |      solution, but will take longer to compute. The default is 20
     |      iterations.
     |  
     |  impulseToForce(...)
     |      impulseToForce(stepsize, impulse) -> 3-tuple
     |      
     |      If you want to apply a linear or angular impulse to a rigid
     |      body, instead of a force or a torque, then you can use this
     |      function to convert the desired impulse into a force/torque
     |      vector before calling the dBodyAdd... function.
     |      
     |      @param stepsize: Time step
     |      @param impulse: Impulse vector
     |      @type stepsize: float
     |      @type impulse: 3-tuple of floats
     |  
     |  quickStep(...)
     |      quickStep(stepsize)
     |      
     |      Step the world. This uses an iterative method that takes time
     |      on the order of O(m*N) and memory on the order of O(m), where m is
     |      the total number of constraint rows and N is the number of
     |      iterations.
     |      
     |      For large systems this is a lot faster than dWorldStep, but it
     |      is less accurate.
     |      
     |      @param stepsize: Time step
     |      @type stepsize: float
     |  
     |  setAngularDamping(...)
     |      setAngularDamping(scale)
     |      
     |      Set the world's angular damping scale.
     |                              @param scale The angular damping scale that is to be applied to bodies.
     |                              Default is 0 (no damping). Should be in the interval [0, 1].
     |      @type scale: float
     |  
     |  setAutoDisableAngularThreshold(...)
     |      setAutoDisableAngularThreshold(threshold)
     |      
     |      Set the default auto-disable angular threshold for newly created
     |      bodies.
     |      
     |      @param threshold: Angular threshold
     |      @type threshold: float
     |  
     |  setAutoDisableFlag(...)
     |      setAutoDisableFlag(flag)
     |      
     |      Set the default auto-disable flag for newly created bodies.
     |      
     |      @param flag: True = Do auto disable
     |      @type flag: bool
     |  
     |  setAutoDisableLinearThreshold(...)
     |      setAutoDisableLinearThreshold(threshold)
     |      
     |      Set the default auto-disable linear threshold for newly created
     |      bodies.
     |      
     |      @param threshold: Linear threshold
     |      @type threshold: float
     |  
     |  setAutoDisableSteps(...)
     |      setAutoDisableSteps(steps)
     |      
     |      Set the default auto-disable steps for newly created bodies.
     |      
     |      @param steps: Auto disable steps
     |      @type steps: int
     |  
     |  setAutoDisableTime(...)
     |      setAutoDisableTime(time)
     |      
     |      Set the default auto-disable time for newly created bodies.
     |      
     |      @param time: Auto disable time
     |      @type time: float
     |  
     |  setCFM(...)
     |      setCFM(cfm)
     |      
     |      Set the global CFM (constraint force mixing) value. Typical
     |      values are in the range 10E-9 - 1. The default is 10E-5 if
     |      single precision is being used, or 10E-10 if double precision
     |      is being used.
     |      
     |      @param cfm: Constraint force mixing value
     |      @type cfm: float
     |  
     |  setContactMaxCorrectingVel(...)
     |      setContactMaxCorrectingVel(vel)
     |      
     |      Set the maximum correcting velocity that contacts are allowed
     |      to generate. The default value is infinity (i.e. no
     |      limit). Reducing this value can help prevent "popping" of
     |      deeply embedded objects.
     |      
     |      @param vel: Maximum correcting velocity
     |      @type vel: float
     |  
     |  setContactSurfaceLayer(...)
     |      setContactSurfaceLayer(depth)
     |      
     |      Set the depth of the surface layer around all geometry
     |      objects. Contacts are allowed to sink into the surface layer
     |      up to the given depth before coming to rest. The default value
     |      is zero. Increasing this to some small value (e.g. 0.001) can
     |      help prevent jittering problems due to contacts being
     |      repeatedly made and broken.
     |      
     |      @param depth: Surface layer depth
     |      @type depth: float
     |  
     |  setERP(...)
     |      setERP(erp)
     |      
     |      Set the global ERP value, that controls how much error
     |      correction is performed in each time step. Typical values are
     |      in the range 0.1-0.8. The default is 0.2.
     |      
     |      @param erp: Global ERP value
     |      @type erp: float
     |  
     |  setGravity(...)
     |      setGravity(gravity)
     |      
     |      Set the world's global gravity vector.
     |      
     |      @param gravity: Gravity vector
     |      @type gravity: 3-sequence of floats
     |  
     |  setLinearDamping(...)
     |      setLinearDamping(scale)
     |      
     |      Set the world's linear damping scale.
     |                              @param scale The linear damping scale that is to be applied to bodies.
     |                              Default is 0 (no damping). Should be in the interval [0, 1].
     |      @type scale: float
     |  
     |  setQuickStepNumIterations(...)
     |      setQuickStepNumIterations(num)
     |      
     |      Set the number of iterations that the QuickStep method
     |      performs per step. More iterations will give a more accurate
     |      solution, but will take longer to compute. The default is 20
     |      iterations.
     |      
     |      @param num: Number of iterations
     |      @type num: int
     |  
     |  step(...)
     |      step(stepsize)
     |      
     |      Step the world. This uses a "big matrix" method that takes
     |      time on the order of O(m3) and memory on the order of O(m2), where m
     |      is the total number of constraint rows.
     |      
     |      For large systems this will use a lot of memory and can be
     |      very slow, but this is currently the most accurate method.
     |      
     |      @param stepsize: Time step
     |      @type stepsize: float
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T

FUNCTIONS
    CloseODE(...)
        CloseODE()
        
        Deallocate some extra memory used by ODE that can not be deallocated
        using the normal destroy functions.
    
    CreateContactJointQ(...)
    
    InitODE(...)
        InitODE()
        
        Initialize some ODE internals. This will be called for you when you 
        "import ode", but you should call this again if you CloseODE().
    
    Space(...)
        Space factory function.
        
        Depending on the type argument this function either returns a
        SimpleSpace (space_type=0) or a HashSpace (space_type=1).
        
        This function is provided to remain compatible with previous
        versions of PyODE where there was only one Space class.
        
         >>> space = Space(space_type=0)   # Create a SimpleSpace
         >>> space = Space(space_type=1)   # Create a HashSpace
    
    areConnected(...)
        areConnected(body1, body2) -> bool
        
        Return True if the two bodies are connected together by a joint,
        otherwise return False.
        
        @param body1: First body
        @type body1: Body
        @param body2: Second body
        @type body2: Body
        @returns: True if the bodies are connected
    
    collide(...)
        collide(geom1, geom2) -> contacts
        
        Generate contact information for two objects.
        
        Given two geometry objects that potentially touch (geom1 and geom2),
        generate contact information for them. Internally, this just calls
        the correct class-specific collision functions for geom1 and geom2.
        
        [flags specifies how contacts should be generated if the objects
        touch. Currently the lower 16 bits of flags specifies the maximum
        number of contact points to generate. If this number is zero, this
        function just pretends that it is one - in other words you can not
        ask for zero contacts. All other bits in flags must be zero. In
        the future the other bits may be used to select other contact
        generation strategies.]
        
        If the objects touch, this returns a list of Contact objects,
        otherwise it returns an empty list.
        
        @param geom1: First Geom
        @type geom1: GeomObject
        @param geom2: Second Geom
        @type geom2: GeomObject
        @returns: Returns a list of Contact objects.
    
    collide2(...)
        collide2(geom1, geom2, arg, callback)
        
        Calls the callback for all potentially intersecting pairs that contain
        one geom from geom1 and one geom from geom2.
        
        @param geom1: First Geom
        @type geom1: GeomObject
        @param geom2: Second Geom
        @type geom2: GeomObject
        @param arg: A user argument that is passed to the callback function
        @param callback: Callback function
        @type callback: callable

DATA
    AMotorEuler = 1
    AMotorUser = 0
    ContactApprox0 = 0
    ContactApprox1 = 12288
    ContactApprox1_1 = 4096
    ContactApprox1_2 = 8192
    ContactBounce = 4
    ContactFDir1 = 2
    ContactMotion1 = 32
    ContactMotion2 = 64
    ContactMu2 = 1
    ContactSlip1 = 128
    ContactSlip2 = 256
    ContactSoftCFM = 16
    ContactSoftERP = 8
    Infinity = inf
    ParamBounce = 5
    ParamBounce2 = 261
    ParamBounce3 = 517
    ParamCFM = 6
    ParamCFM2 = 262
    ParamCFM3 = 518
    ParamFMax = 3
    ParamFMax2 = 259
    ParamFMax3 = 515
    ParamFudgeFactor = 4
    ParamFudgeFactor2 = 260
    ParamFudgeFactor3 = 516
    ParamGroup = 256
    ParamHiStop = 1
    ParamHiStop2 = 257
    ParamHiStop3 = 513
    ParamLoStop = 0
    ParamLoStop2 = 256
    ParamLoStop3 = 512
    ParamStopCFM = 8
    ParamStopCFM2 = 264
    ParamStopCFM3 = 520
    ParamStopERP = 7
    ParamStopERP2 = 263
    ParamStopERP3 = 519
    ParamSuspensionCFM = 10
    ParamSuspensionCFM2 = 266
    ParamSuspensionCFM3 = 522
    ParamSuspensionERP = 9
    ParamSuspensionERP2 = 265
    ParamSuspensionERP3 = 521
    ParamVel = 2
    ParamVel2 = 258
    ParamVel3 = 514
    environment = None
    paramBounce = 5
    paramCFM = 6
    paramFMax = 3
    paramFudgeFactor = 4
    paramHiStop = 1
    paramLoStop = 0
    paramStopCFM = 8
    paramStopERP = 7
    paramSuspensionCFM = 10
    paramSuspensionERP = 9
    paramVel = 2


